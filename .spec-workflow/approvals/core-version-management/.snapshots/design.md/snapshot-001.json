{
  "id": "snapshot_1760240023381_0ixy3e5pl",
  "approvalId": "approval_1760240023349_kbsrqvttf",
  "approvalTitle": "Core Version Management - Design Document",
  "version": 1,
  "timestamp": "2025-10-12T03:33:43.381Z",
  "trigger": "initial",
  "status": "pending",
  "content": "# Design Document\n\n## Overview\n\nThe Core Version Management feature implements the business logic for managing Maven installations on Windows. This includes version resolution (determining which Maven version to use), installation/uninstallation operations, version listing, and cache management. The design follows a modular architecture with clear separation between version management, download operations, and configuration.\n\nThis feature is called by the CLI commands from cli-commands spec and leverages shared infrastructure (download, config). It provides the core intelligence for Maven version selection and lifecycle management.\n\n**Key Design Goals:**\n- Fast version resolution (<100ms)\n- Atomic installations with rollback capability\n- Clear separation of concerns (resolution, installation, listing)\n- Testable components with mockable dependencies\n- Windows-native implementation\n\n## Steering Document Alignment\n\n### Technical Standards (tech.md)\n\n**Architecture Patterns:**\n- **Repository Pattern**: Abstract version storage and retrieval operations\n- **Strategy Pattern**: Version resolution follows shell > local > global strategy\n- **Command Pattern**: Install/uninstall as discrete operations with undo capability\n\n**Go Conventions:**\n- Package structure: `internal/version/` for private version management logic\n- Exported interfaces: `Manager`, `Resolver`, `Installer` for public API\n- File naming: `manager.go`, `resolver.go`, `parser.go`, `compare.go` per structure.md\n\n**Dependencies:**\n- `internal/download`: Download and checksum verification\n- `internal/config`: Configuration file access and path resolution\n- `pkg/maven`: Public Maven version structures and utilities\n\n### Project Structure (structure.md)\n\n**Package Organization:**\n```\ninternal/version/\n├── manager.go      # VersionManager - orchestrates operations\n├── resolver.go     # VersionResolver - determines active version\n├── installer.go    # VersionInstaller - install/uninstall logic\n├── lister.go       # VersionLister - list installed/available\n├── parser.go       # Version string parsing\n├── compare.go      # Semantic version comparison\n└── cache.go        # Available versions cache management\n```\n\n**Naming Conventions:**\n- Exported types: `VersionManager`, `VersionResolver`, `VersionInstaller`\n- Unexported helpers: `parseVersionString()`, `compareVersions()`\n- Interfaces: `Downloader`, `ConfigProvider` for dependency injection\n\n## Code Reuse Analysis\n\n### Existing Components to Leverage\n\n**internal/download (will be shared with nexus-repository-integration):**\n- `Downloader` interface: HTTP download with progress tracking\n- `ChecksumVerifier`: SHA-256 verification\n- `CacheManager`: Downloaded archive management\n\n**internal/config (shared configuration):**\n- `ConfigLoader`: Read config.yaml for global version\n- `PathResolver`: Resolve %USERPROFILE%\\.mvnenv paths\n- `RepositoryConfig`: Access configured repositories\n\n**pkg/maven (public utilities):**\n- `Version` struct: Represent Maven version (major, minor, patch)\n- `ParseVersion()`: Parse version strings to Version struct\n- `CompareVersions()`: Semantic version comparison\n\n### Integration Points\n\n**CLI Commands (cli-commands spec):**\n- Commands call `VersionManager` methods directly\n- Example: `install.go` calls `manager.Install(ctx, version)`\n\n**Nexus Integration (nexus-repository-integration spec):**\n- Provides repository list for available versions\n- Returns download URLs for Maven distributions\n\n**Shim System (shim-system-implementation spec):**\n- Calls `VersionResolver` to determine which Maven to execute\n- Uses resolved path to execute correct Maven binary\n\n## Architecture\n\n### Component Architecture\n\n```mermaid\ngraph TD\n    CLI[CLI Commands] --> VM[VersionManager]\n    VM --> VR[VersionResolver]\n    VM --> VI[VersionInstaller]\n    VM --> VL[VersionLister]\n\n    VR --> CP[ConfigProvider]\n    VR --> FS[FileSystem]\n\n    VI --> DL[Downloader]\n    VI --> CV[ChecksumVerifier]\n    VI --> AE[ArchiveExtractor]\n    VI --> FS\n\n    VL --> FS\n    VL --> VC[VersionCache]\n    VL --> RP[RepositoryProvider]\n\n    VC --> RP\n```\n\n### Version Resolution Flow\n\n```mermaid\ngraph TD\n    Start[Resolve Version Request] --> CheckShell{Check Shell Env}\n    CheckShell -->|MVNENV_MAVEN_VERSION set| ReturnShell[Return Shell Version]\n    CheckShell -->|Not set| CheckLocal{Check .maven-version}\n\n    CheckLocal -->|File found in CWD or parents| ReturnLocal[Return Local Version]\n    CheckLocal -->|Not found| CheckGlobal{Check Global Config}\n\n    CheckGlobal -->|global_version in config| ReturnGlobal[Return Global Version]\n    CheckGlobal -->|Not set| Error[Error: No version set]\n\n    ReturnShell --> Verify{Version Installed?}\n    ReturnLocal --> Verify\n    ReturnGlobal --> Verify\n\n    Verify -->|Yes| Return[Return Version Path]\n    Verify -->|No| ErrorNotInstalled[Error: Version not installed]\n```\n\n### Installation Flow\n\n```mermaid\ngraph TD\n    Start[Install Request] --> Check{Version Installed?}\n    Check -->|Yes| ErrorExists[Error: Already installed]\n    Check -->|No| GetURL[Get Download URL]\n\n    GetURL --> Download[Download Distribution]\n    Download --> Checksum[Verify SHA-256]\n    Checksum -->|Failed| CleanupFail[Delete Downloaded File]\n    CleanupFail --> ErrorChecksum[Error: Checksum mismatch]\n\n    Checksum -->|Success| Cache[Move to Cache]\n    Cache --> CreateDir[Create Version Directory]\n    CreateDir --> Extract[Extract Archive]\n\n    Extract -->|Failed| RollbackDir[Remove Version Directory]\n    RollbackDir --> ErrorExtract[Error: Extraction failed]\n\n    Extract -->|Success| Verify[Verify Maven Binary]\n    Verify -->|Failed| RollbackFinal[Remove Version Directory]\n    RollbackFinal --> ErrorVerify[Error: Invalid installation]\n\n    Verify -->|Success| Success[Installation Complete]\n```\n\n## Components and Interfaces\n\n### Component 1: VersionManager\n\n**Purpose:** Orchestrates all version management operations (install, uninstall, list, resolve)\n\n**Interfaces:**\n```go\ntype VersionManager struct {\n    resolver  *VersionResolver\n    installer *VersionInstaller\n    lister    *VersionLister\n    config    ConfigProvider\n}\n\n// NewVersionManager creates a new VersionManager\nfunc NewVersionManager(config ConfigProvider, downloader Downloader) *VersionManager\n\n// Install installs a Maven version\nfunc (m *VersionManager) Install(ctx context.Context, version string) error\n\n// Uninstall removes a Maven version\nfunc (m *VersionManager) Uninstall(version string) error\n\n// ListInstalled returns all installed versions\nfunc (m *VersionManager) ListInstalled() ([]string, error)\n\n// ListAvailable returns all available versions from repositories\nfunc (m *VersionManager) ListAvailable(ctx context.Context) ([]string, error)\n\n// GetCurrentVersion resolves and returns the active version\nfunc (m *VersionManager) GetCurrentVersion() (string, error)\n\n// SetGlobalVersion sets the global default version\nfunc (m *VersionManager) SetGlobalVersion(version string) error\n\n// SetLocalVersion creates .maven-version file in current directory\nfunc (m *VersionManager) SetLocalVersion(version string) error\n\n// GetLatestVersion returns the latest installed version matching optional prefix\nfunc (m *VersionManager) GetLatestVersion(prefix string) (string, error)\n```\n\n**Dependencies:**\n- `VersionResolver`: For version resolution\n- `VersionInstaller`: For install/uninstall operations\n- `VersionLister`: For listing versions\n- `ConfigProvider`: For configuration access\n\n### Component 2: VersionResolver\n\n**Purpose:** Resolves which Maven version should be active based on hierarchy (shell > local > global)\n\n**Interfaces:**\n```go\ntype VersionResolver struct {\n    config     ConfigProvider\n    fileSystem FileSystem\n}\n\n// NewVersionResolver creates a new VersionResolver\nfunc NewVersionResolver(config ConfigProvider, fs FileSystem) *VersionResolver\n\n// ResolveVersion determines the active Maven version\nfunc (r *VersionResolver) ResolveVersion() (*ResolvedVersion, error)\n\n// GetShellVersion reads MVNENV_MAVEN_VERSION environment variable\nfunc (r *VersionResolver) GetShellVersion() (string, bool)\n\n// GetLocalVersion searches for .maven-version file in current and parent directories\nfunc (r *VersionResolver) GetLocalVersion() (string, error)\n\n// GetGlobalVersion reads global version from config.yaml\nfunc (r *VersionResolver) GetGlobalVersion() (string, error)\n\n// IsVersionInstalled checks if a version exists in versions directory\nfunc (r *VersionResolver) IsVersionInstalled(version string) bool\n\n// GetVersionPath returns the full path to a Maven installation\nfunc (r *VersionResolver) GetVersionPath(version string) string\n```\n\n**Data Models:**\n```go\ntype ResolvedVersion struct {\n    Version string        // e.g., \"3.9.4\"\n    Source  VersionSource // shell, local, or global\n    Path    string        // Full path to Maven installation\n}\n\ntype VersionSource int\nconst (\n    SourceShell  VersionSource = iota\n    SourceLocal\n    SourceGlobal\n)\n```\n\n**Resolution Algorithm:**\n```go\nfunc (r *VersionResolver) ResolveVersion() (*ResolvedVersion, error) {\n    // 1. Check shell environment variable\n    if version, ok := r.GetShellVersion(); ok {\n        if !r.IsVersionInstalled(version) {\n            return nil, ErrVersionNotInstalled\n        }\n        return &ResolvedVersion{\n            Version: version,\n            Source:  SourceShell,\n            Path:    r.GetVersionPath(version),\n        }, nil\n    }\n\n    // 2. Check for .maven-version file\n    if version, err := r.GetLocalVersion(); err == nil {\n        if !r.IsVersionInstalled(version) {\n            return nil, ErrVersionNotInstalled\n        }\n        return &ResolvedVersion{\n            Version: version,\n            Source:  SourceLocal,\n            Path:    r.GetVersionPath(version),\n        }, nil\n    }\n\n    // 3. Check global config\n    if version, err := r.GetGlobalVersion(); err == nil {\n        if !r.IsVersionInstalled(version) {\n            return nil, ErrVersionNotInstalled\n        }\n        return &ResolvedVersion{\n            Version: version,\n            Source:  SourceGlobal,\n            Path:    r.GetVersionPath(version),\n        }, nil\n    }\n\n    return nil, ErrNoVersionSet\n}\n```\n\n### Component 3: VersionInstaller\n\n**Purpose:** Handles installation and uninstallation of Maven versions\n\n**Interfaces:**\n```go\ntype VersionInstaller struct {\n    downloader Downloader\n    config     ConfigProvider\n    verifier   ChecksumVerifier\n}\n\n// NewVersionInstaller creates a new VersionInstaller\nfunc NewVersionInstaller(downloader Downloader, config ConfigProvider) *VersionInstaller\n\n// Install downloads and installs a Maven version\nfunc (i *VersionInstaller) Install(ctx context.Context, version string) error\n\n// Uninstall removes a Maven version\nfunc (i *VersionInstaller) Uninstall(version string) error\n\n// IsInstalled checks if a version is installed\nfunc (i *VersionInstaller) IsInstalled(version string) bool\n\n// VerifyInstallation verifies a Maven installation is valid\nfunc (i *VersionInstaller) VerifyInstallation(version string) error\n```\n\n**Installation Logic:**\n```go\nfunc (i *VersionInstaller) Install(ctx context.Context, version string) error {\n    // 1. Check if already installed\n    if i.IsInstalled(version) {\n        return ErrAlreadyInstalled\n    }\n\n    // 2. Get download URL from repository provider\n    url, checksum, err := i.getDownloadURL(version)\n    if err != nil {\n        return fmt.Errorf(\"failed to get download URL: %w\", err)\n    }\n\n    // 3. Download to cache\n    archivePath, err := i.downloader.Download(ctx, url, i.config.CacheDir())\n    if err != nil {\n        return fmt.Errorf(\"download failed: %w\", err)\n    }\n\n    // 4. Verify checksum\n    if err := i.verifier.Verify(archivePath, checksum); err != nil {\n        os.Remove(archivePath) // Cleanup\n        return fmt.Errorf(\"checksum verification failed: %w\", err)\n    }\n\n    // 5. Create version directory\n    versionDir := filepath.Join(i.config.VersionsDir(), version)\n    if err := os.MkdirAll(versionDir, 0755); err != nil {\n        return fmt.Errorf(\"failed to create version directory: %w\", err)\n    }\n\n    // 6. Extract archive\n    if err := extractArchive(archivePath, versionDir); err != nil {\n        os.RemoveAll(versionDir) // Rollback\n        return fmt.Errorf(\"extraction failed: %w\", err)\n    }\n\n    // 7. Verify installation\n    if err := i.VerifyInstallation(version); err != nil {\n        os.RemoveAll(versionDir) // Rollback\n        return fmt.Errorf(\"installation verification failed: %w\", err)\n    }\n\n    return nil\n}\n```\n\n### Component 4: VersionLister\n\n**Purpose:** Lists installed and available versions\n\n**Interfaces:**\n```go\ntype VersionLister struct {\n    config    ConfigProvider\n    cache     *VersionCache\n    repoProvider RepositoryProvider\n}\n\n// NewVersionLister creates a new VersionLister\nfunc NewVersionLister(config ConfigProvider, cache *VersionCache, repoProvider RepositoryProvider) *VersionLister\n\n// ListInstalled returns all installed versions sorted by semantic version\nfunc (l *VersionLister) ListInstalled() ([]string, error)\n\n// ListAvailable returns all available versions from repositories\nfunc (l *VersionLister) ListAvailable(ctx context.Context, refresh bool) ([]string, error)\n\n// GetLatest returns the latest version matching optional prefix\nfunc (l *VersionLister) GetLatest(prefix string) (string, error)\n```\n\n### Component 5: Version Parsing and Comparison\n\n**Purpose:** Parse and compare Maven version strings\n\n**Interfaces:**\n```go\n// ParseVersion parses a version string into structured Version\nfunc ParseVersion(versionStr string) (*maven.Version, error)\n\n// CompareVersions compares two versions using semantic versioning\n// Returns -1 if v1 < v2, 0 if equal, 1 if v1 > v2\nfunc CompareVersions(v1, v2 string) (int, error)\n\n// SortVersions sorts versions in descending order (newest first)\nfunc SortVersions(versions []string) []string\n```\n\n**Implementation:**\n```go\n// In pkg/maven/version.go\ntype Version struct {\n    Major      int\n    Minor      int\n    Patch      int\n    Qualifier  string // e.g., \"alpha\", \"beta\", \"RC1\"\n}\n\nfunc ParseVersion(versionStr string) (*Version, error) {\n    // Parse \"3.9.4\" or \"3.9.0-beta-1\" format\n    // Return structured Version\n}\n\nfunc (v *Version) Compare(other *Version) int {\n    if v.Major != other.Major {\n        return v.Major - other.Major\n    }\n    if v.Minor != other.Minor {\n        return v.Minor - other.Minor\n    }\n    if v.Patch != other.Patch {\n        return v.Patch - other.Patch\n    }\n    // Compare qualifiers lexicographically\n    return strings.Compare(v.Qualifier, other.Qualifier)\n}\n```\n\n## Data Models\n\n### Version Configuration\n\n```go\n// In internal/config/config.go\ntype Config struct {\n    GlobalVersion string `yaml:\"global_version\"`\n    // Other config fields\n}\n\n// GetGlobalVersion returns the configured global version\nfunc (c *Config) GetGlobalVersion() string {\n    return c.GlobalVersion\n}\n\n// SetGlobalVersion updates the global version in config\nfunc (c *Config) SetGlobalVersion(version string) error {\n    c.GlobalVersion = version\n    return c.Save()\n}\n```\n\n### Version Cache\n\n```go\n// VersionCache manages cached available versions\ntype VersionCache struct {\n    cachePath  string\n    ttl        time.Duration\n}\n\ntype CachedVersions struct {\n    Versions  []string  `json:\"versions\"`\n    Timestamp time.Time `json:\"timestamp\"`\n}\n\nfunc (c *VersionCache) Get() ([]string, error) {\n    // Read cache file\n    // Check if stale (timestamp > TTL)\n    // Return versions or nil if stale\n}\n\nfunc (c *VersionCache) Set(versions []string) error {\n    // Write versions with current timestamp\n}\n```\n\n## Error Handling\n\n### Error Types\n\n```go\nvar (\n    ErrVersionNotInstalled = errors.New(\"version not installed\")\n    ErrAlreadyInstalled   = errors.New(\"version already installed\")\n    ErrNoVersionSet       = errors.New(\"no Maven version set\")\n    ErrInvalidVersion     = errors.New(\"invalid version format\")\n    ErrDownloadFailed     = errors.New(\"download failed\")\n    ErrChecksumMismatch   = errors.New(\"checksum verification failed\")\n    ErrExtractionFailed   = errors.New(\"archive extraction failed\")\n    ErrInstallationInvalid = errors.New(\"installation verification failed\")\n)\n```\n\n### Error Scenarios\n\n**1. Version Not Installed**\n- **Handling:** Return ErrVersionNotInstalled with version details\n- **User Impact:** \"Error: version '3.9.4' not installed. Run 'mvnenv install -l' to see available versions.\"\n\n**2. Already Installed**\n- **Handling:** Return ErrAlreadyInstalled, no operation performed\n- **User Impact:** \"Error: version '3.9.4' already installed\"\n\n**3. Download Failure**\n- **Handling:** Wrap network error, cleanup partial files\n- **User Impact:** \"Error: download failed: connection timeout\"\n\n**4. Checksum Mismatch**\n- **Handling:** Delete downloaded file, return ErrChecksumMismatch\n- **User Impact:** \"Error: checksum verification failed for Maven 3.9.4\"\n\n**5. Extraction Failure**\n- **Handling:** Remove version directory (rollback), return ErrExtractionFailed\n- **User Impact:** \"Error: failed to extract archive: invalid zip format\"\n\n## Testing Strategy\n\n### Unit Testing\n\n**VersionResolver Tests:**\n- Test shell > local > global precedence\n- Test .maven-version file discovery in parent directories\n- Test error handling when no version set\n- Mock FileSystem and ConfigProvider\n\n**VersionInstaller Tests:**\n- Test successful installation flow\n- Test rollback on checksum failure\n- Test rollback on extraction failure\n- Mock Downloader and FileSystem\n\n**Version Comparison Tests:**\n- Test semantic version comparison (3.9.0 > 3.8.10)\n- Test qualifier handling (3.9.0 > 3.9.0-beta)\n- Test sorting of version lists\n\n### Integration Testing\n\n**Installation Integration:**\n- Test full installation with real filesystem (temp directory)\n- Test uninstallation cleanup\n- Test concurrent installation prevention\n\n**Resolution Integration:**\n- Test version resolution with real config files\n- Test .maven-version file in nested directories\n- Test environment variable override\n\n### Performance Testing\n\n**Benchmarks:**\n- Version resolution: Target <100ms\n- List installed: Target <100ms\n- Version comparison: Target <1ms\n\n```go\nfunc BenchmarkResolveVersion(b *testing.B) {\n    resolver := NewVersionResolver(config, fs)\n    for i := 0; i < b.N; i++ {\n        _, _ = resolver.ResolveVersion()\n    }\n}\n```\n\n## Implementation Notes\n\n### Atomic Installation Pattern\n\nUse temporary directory during extraction, then atomic rename:\n\n```go\n// Extract to temp directory\ntempDir := filepath.Join(cacheDir, \"tmp-\"+version)\nif err := extractArchive(archivePath, tempDir); err != nil {\n    os.RemoveAll(tempDir)\n    return err\n}\n\n// Verify before committing\nif err := verifyInstallation(tempDir); err != nil {\n    os.RemoveAll(tempDir)\n    return err\n}\n\n// Atomic move to final location\nfinalDir := filepath.Join(versionsDir, version)\nif err := os.Rename(tempDir, finalDir); err != nil {\n    os.RemoveAll(tempDir)\n    return err\n}\n```\n\n### Concurrent Installation Prevention\n\nUse file locks to prevent concurrent installations:\n\n```go\nlockFile := filepath.Join(cacheDir, \".\"+version+\".lock\")\nlock, err := acquireFileLock(lockFile)\nif err != nil {\n    return ErrConcurrentInstallation\n}\ndefer lock.Release()\n```\n\n### Windows Path Handling\n\nAlways use `filepath` package for cross-platform paths:\n\n```go\n// Correct\nversionPath := filepath.Join(baseDir, \"versions\", version)\n\n// Incorrect (Unix-only)\nversionPath := baseDir + \"/versions/\" + version\n```\n",
  "fileStats": {
    "size": 19507,
    "lines": 639,
    "lastModified": "2025-10-12T03:33:33.927Z"
  },
  "comments": []
}