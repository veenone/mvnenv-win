{
  "id": "snapshot_1760252729579_6apnb6bcz",
  "approvalId": "approval_1760242546504_30lbgh97w",
  "approvalTitle": "Nexus Repository Integration - Design Document",
  "version": 2,
  "timestamp": "2025-10-12T07:05:29.578Z",
  "trigger": "approved",
  "status": "pending",
  "content": "# Design Document\n\n## Architecture Overview\n\nThe Nexus Repository Integration feature implements a flexible repository abstraction layer that supports multiple Maven distribution sources (Nexus Repository Manager, Apache Maven archives) with authentication, priority-based selection, and automatic fallback. The architecture uses the Repository pattern to abstract different source types and provides a unified interface for version discovery and distribution downloads.\n\n### Core Design Principles\n\n1. **Repository Abstraction**: Common `Repository` interface allows pluggable implementations for Nexus, Apache archives, and future sources\n2. **Priority-Based Selection**: Repositories queried in priority order with automatic fallback on failure\n3. **Secure by Default**: TLS certificate validation mandatory, credentials stored in Windows Credential Manager\n4. **Graceful Degradation**: Single repository failure doesn't prevent using other repositories\n5. **Efficient Caching**: Metadata cached with TTL to minimize network queries\n\n## Component Architecture\n\n```\ninternal/nexus/\n├── repository.go         # Repository interface and types\n├── manager.go           # RepositoryManager orchestrates multiple repositories\n├── nexus_client.go      # NexusClient implements Repository for Nexus\n├── apache_client.go     # ApacheArchiveClient implements Repository for Apache\n├── credentials.go       # CredentialManager for Windows Credential Manager\n├── metadata.go          # MetadataCache for version caching\n├── config.go            # RepositoryConfig for repositories.yaml\n└── http.go              # HTTPClient wrapper with retry and timeout logic\n```\n\n### Component Relationships\n\n```\nCLI Commands (repo add/list/remove)\n         ↓\n  RepositoryManager ←─────────────┐\n         ↓                         │\n    Repository (interface)         │\n      ↙        ↘                  │\nNexusClient  ApacheArchiveClient  │\n      ↓            ↓              │\n  HTTPClient   HTTPClient         │\n      ↓            ↓              │\n  CredentialManager               │\n         ↓                        │\n  MetadataCache ──────────────────┘\n```\n\n## Detailed Component Design\n\n### 1. Repository Interface\n\nThe core abstraction for all Maven distribution sources.\n\n```go\n// Repository represents a source for Maven distributions\ntype Repository interface {\n    // Name returns the repository identifier\n    Name() string\n\n    // Priority returns the repository priority (lower = higher priority)\n    Priority() int\n\n    // IsEnabled returns whether the repository is enabled\n    IsEnabled() bool\n\n    // DiscoverVersions queries the repository for available Maven versions\n    // Returns list of versions or error if repository unavailable\n    DiscoverVersions(ctx context.Context) ([]string, error)\n\n    // DownloadDistribution downloads Maven distribution for specified version\n    // Returns path to downloaded file or error\n    DownloadDistribution(ctx context.Context, version string, destDir string, progress ProgressCallback) (string, error)\n\n    // VerifyChecksum downloads and verifies checksum for distribution\n    // Returns true if checksum valid, false otherwise\n    VerifyChecksum(ctx context.Context, archivePath string, version string) (bool, error)\n\n    // HasVersion checks if repository provides specific version (uses cache if available)\n    HasVersion(version string) (bool, error)\n}\n\n// ProgressCallback is called during downloads to report progress\ntype ProgressCallback func(downloaded int64, total int64)\n\n// RepositoryType identifies the type of repository\ntype RepositoryType string\n\nconst (\n    RepositoryTypeNexus  RepositoryType = \"nexus\"\n    RepositoryTypeApache RepositoryType = \"apache\"\n)\n```\n\n### 2. RepositoryManager\n\nOrchestrates multiple repositories with priority-based selection and fallback.\n\n```go\n// RepositoryManager manages multiple Maven distribution repositories\ntype RepositoryManager struct {\n    repositories []Repository\n    config       *RepositoryConfig\n    cache        *MetadataCache\n    credentials  *CredentialManager\n}\n\n// NewRepositoryManager creates a new repository manager\nfunc NewRepositoryManager(configPath string) (*RepositoryManager, error)\n\n// AddRepository adds a new repository to configuration\nfunc (m *RepositoryManager) AddRepository(name string, url string, priority int, repoType RepositoryType) error\n\n// RemoveRepository removes a repository from configuration\nfunc (m *RepositoryManager) RemoveRepository(name string) error\n\n// ListRepositories returns all configured repositories\nfunc (m *RepositoryManager) ListRepositories() []RepositoryInfo\n\n// SetAuthentication configures authentication for a repository\nfunc (m *RepositoryManager) SetAuthentication(repoName string, authType AuthType, credentials interface{}) error\n\n// DiscoverVersions queries all repositories and returns combined version list\n// Queries repositories in priority order, deduplicates results\nfunc (m *RepositoryManager) DiscoverVersions(ctx context.Context, forceRefresh bool) ([]VersionInfo, error)\n\n// DownloadVersion downloads Maven distribution from appropriate repository\n// Uses cached metadata to identify which repository has the version\n// Falls back to other repositories if primary fails\nfunc (m *RepositoryManager) DownloadVersion(ctx context.Context, version string, destDir string, progress ProgressCallback) (string, error)\n\n// GetRepository returns repository by name for direct access\nfunc (m *RepositoryManager) GetRepository(name string) (Repository, error)\n\n// RepositoryInfo contains display information about a repository\ntype RepositoryInfo struct {\n    Name        string\n    URL         string\n    Type        RepositoryType\n    Priority    int\n    Enabled     bool\n    HasAuth     bool\n    LastChecked time.Time\n    Available   bool\n}\n\n// VersionInfo contains version and its repository source\ntype VersionInfo struct {\n    Version    string\n    Source     string // repository name\n    SourceType RepositoryType\n}\n```\n\n**Key Algorithms:**\n\n**DiscoverVersions Algorithm:**\n```\n1. Check if cache is fresh (< TTL) and forceRefresh is false\n   - If yes: return cached versions\n2. Sort repositories by priority (ascending)\n3. For each enabled repository in priority order:\n   a. Query repository.DiscoverVersions() with timeout\n   b. If success: add versions to result set with source info\n   c. If failure: log warning, continue to next repository\n4. If no repositories succeeded: return error\n5. Deduplicate versions (keep first occurrence = highest priority source)\n6. Update cache with results and timestamp\n7. Return combined version list\n```\n\n**DownloadVersion Algorithm:**\n```\n1. Query cache to find which repository provides version\n2. If found: attempt download from that repository\n   a. If success: return path\n   b. If failure: log error, continue to fallback\n3. Query all repositories for version (in priority order)\n4. For each repository that has version:\n   a. Attempt download with progress callback\n   b. If success: verify checksum if available, return path\n   c. If failure: log error, try next repository\n5. If all repositories failed: return error \"version not found\"\n```\n\n### 3. NexusClient\n\nImplements Repository interface for Nexus Repository Manager.\n\n```go\n// NexusClient implements Repository for Nexus Repository Manager 2.x/3.x\ntype NexusClient struct {\n    name         string\n    baseURL      string\n    priority     int\n    enabled      bool\n    authType     AuthType\n    httpClient   *HTTPClient\n    credentials  *CredentialManager\n    tlsConfig    *TLSConfig\n}\n\n// NewNexusClient creates a new Nexus repository client\nfunc NewNexusClient(name string, baseURL string, priority int, credentials *CredentialManager, tlsConfig *TLSConfig) *NexusClient\n\n// DiscoverVersions queries Nexus for available Maven versions\n// Requests: {baseURL}/org/apache/maven/apache-maven/maven-metadata.xml\n// Parses: <metadata><versioning><versions><version>3.9.4</version>...\nfunc (c *NexusClient) DiscoverVersions(ctx context.Context) ([]string, error)\n\n// DownloadDistribution downloads Maven distribution from Nexus\n// URL: {baseURL}/org/apache/maven/apache-maven/{version}/apache-maven-{version}-bin.zip\nfunc (c *NexusClient) DownloadDistribution(ctx context.Context, version string, destDir string, progress ProgressCallback) (string, error)\n\n// VerifyChecksum downloads .sha256 file and verifies archive\n// URL: {baseURL}/org/apache/maven/apache-maven/{version}/apache-maven-{version}-bin.zip.sha256\nfunc (c *NexusClient) VerifyChecksum(ctx context.Context, archivePath string, version string) (bool, error)\n\n// AuthType defines authentication method\ntype AuthType string\n\nconst (\n    AuthTypeNone   AuthType = \"none\"\n    AuthTypeBasic  AuthType = \"basic\"\n    AuthTypeToken  AuthType = \"token\"\n)\n\n// TLSConfig contains TLS/SSL settings\ntype TLSConfig struct {\n    Insecure       bool   // Skip certificate verification (must be explicit)\n    CAFile         string // Path to custom CA certificate\n    ClientCertFile string // Path to client certificate (future)\n    ClientKeyFile  string // Path to client key (future)\n}\n```\n\n**Key Operations:**\n\n**DiscoverVersions Implementation:**\n```\n1. Construct metadata URL: {baseURL}/org/apache/maven/apache-maven/maven-metadata.xml\n2. Create HTTP GET request with context\n3. Add authentication headers if configured\n4. Execute request with timeout\n5. If 401/403: return error \"authentication failed\"\n6. If 404: return error \"metadata not found\"\n7. Parse XML response:\n   <metadata>\n     <versioning>\n       <versions>\n         <version>3.6.3</version>\n         <version>3.8.6</version>\n         ...\n       </versions>\n     </versioning>\n   </metadata>\n8. Extract all <version> elements\n9. Return version list\n```\n\n**DownloadDistribution Implementation:**\n```\n1. Construct artifact URL: {baseURL}/org/apache/maven/apache-maven/{version}/apache-maven-{version}-bin.zip\n2. Create destination file: {destDir}/apache-maven-{version}-bin.zip\n3. Create HTTP GET request with context\n4. Add authentication headers if configured\n5. Execute request and get response body reader\n6. If 401/403: return error \"authentication failed\"\n7. If 404: return error \"version not found\"\n8. Stream response to file with progress callback:\n   - Read chunk from response\n   - Write chunk to file\n   - Call progress(bytesWritten, totalSize)\n9. Close file and response\n10. Return file path\n```\n\n### 4. ApacheArchiveClient\n\nImplements Repository interface for Apache Maven official archives.\n\n```go\n// ApacheArchiveClient implements Repository for Apache Maven archive\ntype ApacheArchiveClient struct {\n    name       string\n    baseURL    string // https://archive.apache.org/dist/maven/maven-3/\n    priority   int\n    enabled    bool\n    httpClient *HTTPClient\n}\n\n// NewApacheArchiveClient creates Apache archive repository client\nfunc NewApacheArchiveClient(name string, priority int) *ApacheArchiveClient\n\n// DiscoverVersions scrapes Apache archive directory listing\n// Parses HTML: <a href=\"3.9.4/\">3.9.4/</a>\nfunc (c *ApacheArchiveClient) DiscoverVersions(ctx context.Context) ([]string, error)\n\n// DownloadDistribution downloads from Apache archive\n// URL: {baseURL}/{version}/binaries/apache-maven-{version}-bin.zip\nfunc (c *ApacheArchiveClient) DownloadDistribution(ctx context.Context, version string, destDir string, progress ProgressCallback) (string, error)\n\n// VerifyChecksum downloads .sha512 file and verifies archive\n// URL: {baseURL}/{version}/binaries/apache-maven-{version}-bin.zip.sha512\nfunc (c *ApacheArchiveClient) VerifyChecksum(ctx context.Context, archivePath string, version string) (bool, error)\n```\n\n**Key Operations:**\n\n**DiscoverVersions Implementation (Directory Scraping):**\n```\n1. HTTP GET: https://archive.apache.org/dist/maven/maven-3/\n2. Parse HTML response for directory links:\n   - Match pattern: <a href=\"(\\d+\\.\\d+\\.\\d+)/\">\n   - Extract version numbers\n3. Filter valid semantic versions\n4. Return version list\n```\n\n### 5. CredentialManager\n\nManages secure credential storage using Windows Credential Manager.\n\n```go\n// CredentialManager handles secure credential storage\ntype CredentialManager struct {\n    targetPrefix string // \"mvnenv:repo:\"\n}\n\n// NewCredentialManager creates a credential manager\nfunc NewCredentialManager() *CredentialManager\n\n// StoreCredentials stores credentials in Windows Credential Manager\n// Target: mvnenv:repo:{repoName}\nfunc (m *CredentialManager) StoreCredentials(repoName string, username string, password string) error\n\n// RetrieveCredentials retrieves credentials from Windows Credential Manager\n// Returns username, password, error\nfunc (m *CredentialManager) RetrieveCredentials(repoName string) (string, string, error)\n\n// DeleteCredentials removes credentials from Windows Credential Manager\nfunc (m *CredentialManager) DeleteCredentials(repoName string) error\n\n// HasCredentials checks if credentials exist for repository\nfunc (m *CredentialManager) HasCredentials(repoName string) bool\n```\n\n**Implementation Details:**\n- Use `github.com/danieljoos/wincred` or syscall to Windows Credential Manager APIs\n- Target name format: `mvnenv:repo:{repoName}` for namespacing\n- Store username as CredentialAttribute, password as CredentialBlob (encrypted by OS)\n- Handle errors gracefully: if Credential Manager unavailable, return error suggesting environment variables\n\n### 6. MetadataCache\n\nCaches version metadata to reduce network queries.\n\n```go\n// MetadataCache manages cached repository metadata\ntype MetadataCache struct {\n    cachePath string // %USERPROFILE%\\.mvnenv\\cache\\repo-metadata.json\n    ttl       time.Duration\n    mu        sync.RWMutex\n}\n\n// NewMetadataCache creates a metadata cache\nfunc NewMetadataCache(cachePath string, ttl time.Duration) *MetadataCache\n\n// IsFresh checks if cache is within TTL\nfunc (c *MetadataCache) IsFresh() bool\n\n// Load loads cached metadata from disk\nfunc (c *MetadataCache) Load() (*CachedMetadata, error)\n\n// Save saves metadata to disk with current timestamp\nfunc (c *MetadataCache) Save(metadata *CachedMetadata) error\n\n// Invalidate deletes cache file\nfunc (c *MetadataCache) Invalidate() error\n\n// CachedMetadata contains cached version information\ntype CachedMetadata struct {\n    Timestamp time.Time               `json:\"timestamp\"`\n    Versions  []CachedVersionInfo     `json:\"versions\"`\n    Repos     map[string]RepoSnapshot `json:\"repos\"` // repository state snapshot\n}\n\n// CachedVersionInfo contains version with source repository\ntype CachedVersionInfo struct {\n    Version    string         `json:\"version\"`\n    Source     string         `json:\"source\"`      // repository name\n    SourceType RepositoryType `json:\"source_type\"`\n}\n\n// RepoSnapshot captures repository state at cache time\ntype RepoSnapshot struct {\n    URL       string    `json:\"url\"`\n    Priority  int       `json:\"priority\"`\n    Available bool      `json:\"available\"` // was repository reachable?\n    Timestamp time.Time `json:\"timestamp\"`\n}\n```\n\n**Cache Invalidation Rules:**\n1. TTL expired (default 24 hours)\n2. Repository configuration changed (add/remove/modify)\n3. User runs `mvnenv update` command\n4. Cache file corrupted (JSON parse error)\n\n### 7. RepositoryConfig\n\nManages repositories.yaml configuration file.\n\n```go\n// RepositoryConfig manages repository configuration\ntype RepositoryConfig struct {\n    configPath string\n    mu         sync.RWMutex\n}\n\n// NewRepositoryConfig creates repository config manager\nfunc NewRepositoryConfig(configPath string) *RepositoryConfig\n\n// Load loads configuration from disk\nfunc (c *RepositoryConfig) Load() (*Config, error)\n\n// Save saves configuration to disk\nfunc (c *RepositoryConfig) Save(config *Config) error\n\n// AddRepository adds repository to configuration\nfunc (c *RepositoryConfig) AddRepository(repo RepositoryEntry) error\n\n// RemoveRepository removes repository from configuration\nfunc (c *RepositoryConfig) RemoveRepository(name string) error\n\n// Config represents repositories.yaml structure\ntype Config struct {\n    Repositories []RepositoryEntry `yaml:\"repositories\"`\n}\n\n// RepositoryEntry represents a single repository configuration\ntype RepositoryEntry struct {\n    Name     string         `yaml:\"name\"`\n    Type     RepositoryType `yaml:\"type\"`\n    URL      string         `yaml:\"url\"`\n    Priority int            `yaml:\"priority\"`\n    Enabled  bool           `yaml:\"enabled\"`\n    Auth     *AuthConfig    `yaml:\"auth,omitempty\"`\n    TLS      *TLSConfig     `yaml:\"tls,omitempty\"`\n}\n\n// AuthConfig contains authentication configuration\ntype AuthConfig struct {\n    Type     AuthType `yaml:\"type\"`\n    Username string   `yaml:\"username,omitempty\"` // Can be ${ENV_VAR}\n    Password string   `yaml:\"password,omitempty\"` // Can be ${ENV_VAR}\n    Token    string   `yaml:\"token,omitempty\"`    // Can be ${ENV_VAR}\n}\n```\n\n**Environment Variable Substitution:**\n```go\n// expandEnvVars replaces ${VAR_NAME} with environment variable value\nfunc expandEnvVars(value string) string {\n    re := regexp.MustCompile(`\\$\\{([A-Z_][A-Z0-9_]*)\\}`)\n    return re.ReplaceAllStringFunc(value, func(match string) string {\n        varName := match[2 : len(match)-1] // Strip ${ and }\n        return os.Getenv(varName)\n    })\n}\n```\n\n**Default Configuration (no repositories.yaml):**\n```yaml\nrepositories:\n  - name: \"apache\"\n    type: \"apache\"\n    url: \"https://archive.apache.org/dist/maven/maven-3/\"\n    priority: 100\n    enabled: true\n```\n\n### 8. HTTPClient\n\nWrapper for HTTP client with retry logic and timeout handling.\n\n```go\n// HTTPClient wraps HTTP client with retry and timeout logic\ntype HTTPClient struct {\n    client      *resty.Client\n    timeout     time.Duration\n    retryCount  int\n    retryWait   time.Duration\n}\n\n// NewHTTPClient creates HTTP client with configuration\nfunc NewHTTPClient(timeout time.Duration, tlsConfig *TLSConfig) *HTTPClient\n\n// Get performs HTTP GET with retry logic\nfunc (c *HTTPClient) Get(ctx context.Context, url string, auth *AuthConfig) (*resty.Response, error)\n\n// Download downloads file with progress callback\nfunc (c *HTTPClient) Download(ctx context.Context, url string, destPath string, auth *AuthConfig, progress ProgressCallback) error\n\n// SetTLSConfig updates TLS configuration\nfunc (c *HTTPClient) SetTLSConfig(tlsConfig *TLSConfig)\n```\n\n**Retry Logic:**\n- Retry on: connection errors, timeouts, 5xx server errors\n- Don't retry on: 4xx client errors (except 429 Too Many Requests)\n- Exponential backoff: 1s, 2s, 4s\n- Max retries: 3\n\n## Integration Points\n\n### Integration with core-version-management\n\nThe `VersionInstaller` component (from core-version-management spec) will use `RepositoryManager`:\n\n```go\n// In internal/version/installer.go\ntype VersionInstaller struct {\n    repoManager *nexus.RepositoryManager\n    // ... other fields\n}\n\nfunc (i *VersionInstaller) InstallVersion(version string) error {\n    // 1. Download distribution\n    archivePath, err := i.repoManager.DownloadVersion(ctx, version, tempDir, progressCallback)\n    if err != nil {\n        return fmt.Errorf(\"download failed: %w\", err)\n    }\n\n    // 2. Extract and install\n    // ... extraction logic ...\n}\n```\n\n### Integration with cli-commands\n\nRepository management commands (from cli-commands spec) will use `RepositoryManager`:\n\n```go\n// In cmd/mvnenv/cmd/repo_add.go\nfunc runRepoAdd(cmd *cobra.Command, args []string) error {\n    repoManager, err := nexus.NewRepositoryManager(configPath)\n    // ...\n    return repoManager.AddRepository(name, url, priority, repoType)\n}\n```\n\n## Error Handling\n\n### Error Types\n\n```go\n// Error types for repository operations\nvar (\n    ErrRepositoryNotFound     = errors.New(\"repository not found\")\n    ErrRepositoryExists       = errors.New(\"repository already exists\")\n    ErrAuthenticationFailed   = errors.New(\"authentication failed\")\n    ErrVersionNotFound        = errors.New(\"version not found in any repository\")\n    ErrNoRepositoriesAvailable = errors.New(\"no repositories available\")\n    ErrInvalidConfiguration   = errors.New(\"invalid repository configuration\")\n    ErrCertificateInvalid     = errors.New(\"TLS certificate validation failed\")\n)\n\n// RepositoryError wraps errors with repository context\ntype RepositoryError struct {\n    Repo      string\n    Operation string\n    Cause     error\n}\n\nfunc (e *RepositoryError) Error() string {\n    return fmt.Sprintf(\"repository '%s' %s: %v\", e.Repo, e.Operation, e.Cause)\n}\n```\n\n### Error Handling Strategy\n\n1. **Network Errors**: Retry with exponential backoff, fall back to next repository\n2. **Authentication Errors**: Return immediately with clear error (don't retry other repos with same creds)\n3. **Not Found Errors**: Try next repository in priority order\n4. **Certificate Errors**: Return immediately with certificate details\n5. **Configuration Errors**: Return immediately (don't attempt operation)\n\n## Testing Strategy\n\n### Unit Tests\n\n```go\n// Test files\ninternal/nexus/manager_test.go        // RepositoryManager logic\ninternal/nexus/nexus_client_test.go   // NexusClient operations\ninternal/nexus/apache_client_test.go  // ApacheArchiveClient operations\ninternal/nexus/credentials_test.go    // Credential management\ninternal/nexus/metadata_test.go       // Cache operations\ninternal/nexus/config_test.go         // Configuration management\n```\n\n**Key Test Cases:**\n- Repository priority ordering (multiple repos with different priorities)\n- Fallback logic (primary repo fails, secondary succeeds)\n- Authentication header injection (basic and token auth)\n- Environment variable substitution in config\n- Cache freshness calculation and TTL expiration\n- Checksum verification (valid and invalid checksums)\n- TLS certificate validation (valid, invalid, custom CA)\n- Concurrent repository queries\n\n### Integration Tests\n\n```go\n// Test files\ntest/integration/nexus_integration_test.go\n```\n\n**Key Test Scenarios:**\n1. Add/remove repositories via RepositoryManager\n2. Discover versions from real Nexus instance (if available) or mock server\n3. Download distribution with progress tracking\n4. Fallback: primary Nexus fails, Apache archive succeeds\n5. Authentication: valid credentials succeed, invalid fail with clear error\n6. Cache: first query hits network, second query uses cache\n7. Configuration file persistence across manager restarts\n\n### Mock Server for Testing\n\n```go\n// test/mocks/nexus_mock.go\ntype MockNexusServer struct {\n    *httptest.Server\n    metadata    string // XML metadata response\n    versions    map[string][]byte // version -> archive content\n    authEnabled bool\n    authToken   string\n}\n```\n\n## Security Considerations\n\n### Credential Security\n\n1. **Windows Credential Manager**: Primary storage, OS-managed encryption\n2. **Environment Variables**: Fallback for automation, clearly documented as less secure\n3. **No Plaintext in Config**: Configuration file never contains plaintext passwords\n4. **Audit Logging**: All authentication attempts logged (success/failure)\n\n### TLS Security\n\n1. **Certificate Validation**: Mandatory by default, explicit flag to disable\n2. **Custom CA Support**: Load custom CA certificates from file\n3. **Warning Logging**: Log warning on every insecure connection\n4. **Certificate Chain Validation**: Full chain including intermediates\n\n### Input Validation\n\n1. **Repository Name**: Alphanumeric, hyphens, underscores only (prevent path traversal)\n2. **URL Validation**: Must be valid HTTP/HTTPS URL with hostname\n3. **Version String**: Semantic version format validation\n4. **Path Sanitization**: All file paths sanitized to prevent directory traversal\n\n## Performance Optimization\n\n### Parallel Repository Queries\n\n```go\n// Query multiple repositories in parallel\nfunc (m *RepositoryManager) DiscoverVersions(ctx context.Context, forceRefresh bool) ([]VersionInfo, error) {\n    var wg sync.WaitGroup\n    results := make(chan []VersionInfo, len(m.repositories))\n\n    for _, repo := range m.repositories {\n        if !repo.IsEnabled() {\n            continue\n        }\n\n        wg.Add(1)\n        go func(r Repository) {\n            defer wg.Done()\n            versions, err := r.DiscoverVersions(ctx)\n            if err != nil {\n                log.Warnf(\"repository %s failed: %v\", r.Name(), err)\n                return\n            }\n            // Convert to VersionInfo and send to channel\n        }(repo)\n    }\n\n    wg.Wait()\n    close(results)\n\n    // Combine and deduplicate results\n}\n```\n\n### Connection Pooling\n\n- Reuse HTTP client across requests to same repository\n- Configure connection pool size: 10 connections per repository\n- Keep-alive timeout: 90 seconds\n\n### Download Resume\n\n- Support HTTP Range requests for partial download resume (future enhancement)\n- Current implementation: restart download on failure\n\n## Configuration Examples\n\n### repositories.yaml with Multiple Sources\n\n```yaml\nrepositories:\n  - name: \"corporate-nexus\"\n    type: \"nexus\"\n    url: \"https://nexus.company.com/repository/maven-releases\"\n    priority: 1\n    enabled: true\n    auth:\n      type: \"basic\"\n      username: \"${NEXUS_USER}\"\n      password: \"${NEXUS_PASS}\"\n    tls:\n      insecure: false\n      ca_file: \"C:\\\\certs\\\\company-ca.crt\"\n\n  - name: \"backup-nexus\"\n    type: \"nexus\"\n    url: \"https://nexus-backup.company.com/repository/maven\"\n    priority: 2\n    enabled: true\n    auth:\n      type: \"token\"\n      token: \"${NEXUS_TOKEN}\"\n\n  - name: \"apache\"\n    type: \"apache\"\n    url: \"https://archive.apache.org/dist/maven/maven-3/\"\n    priority: 100\n    enabled: true\n```\n\n### Minimal Configuration (Apache Only)\n\n```yaml\nrepositories:\n  - name: \"apache\"\n    type: \"apache\"\n    url: \"https://archive.apache.org/dist/maven/maven-3/\"\n    priority: 1\n    enabled: true\n```\n\n## Future Enhancements\n\n### Phase 1 (v1.1.0)\n- Maven Central repository support (in addition to Apache archives)\n- Proxy server configuration for HTTP requests\n- Download resume support (HTTP Range requests)\n\n### Phase 2 (v1.2.0)\n- Repository health monitoring and circuit breaker pattern\n- Automatic repository discovery from Maven settings.xml\n- Repository mirroring configuration\n- Webhook notifications for new version availability\n\n### Phase 3 (v2.0.0)\n- GraphQL API for Nexus 3.x (in addition to REST)\n- Artifact signing verification (GPG signatures)\n- Bandwidth throttling for downloads\n- Multi-threaded chunk downloads for large files\n",
  "fileStats": {
    "size": 26399,
    "lines": 772,
    "lastModified": "2025-10-12T04:15:38.292Z"
  },
  "comments": []
}