{
  "id": "snapshot_1760253174988_106jx470a",
  "approvalId": "approval_1760252944100_gurvm1wye",
  "approvalTitle": "Nexus Repository Integration - Tasks Document",
  "version": 2,
  "timestamp": "2025-10-12T07:12:54.988Z",
  "trigger": "approved",
  "status": "pending",
  "content": "# Tasks Document\n\nThis document lists all implementation tasks for the Nexus Repository Integration feature. Each task includes detailed prompts for AI-assisted development.\n\n## Task List\n\n### Foundation Tasks\n\n#### Task 1: Create Repository Interface and Core Types\n**Status:** [ ] Not Started | [ ] In Progress | [ ] Completed\n\n**Files to Create:**\n- `internal/nexus/repository.go`\n\n**Description:** Define the Repository interface and core types (RepositoryType, ProgressCallback, RepositoryInfo, VersionInfo) that provide the abstraction layer for all Maven distribution sources.\n\n**Dependencies:** None\n\n**Estimated Effort:** 2 hours\n\n**_Prompt:**\n```\nYou are implementing the Repository interface for mvnenv-win's Nexus integration feature.\n\n**Role:** Senior Go backend developer with expertise in repository pattern and API design.\n\n**Task:** Create internal/nexus/repository.go with:\n\n1. Repository interface with methods:\n   - Name() string\n   - Priority() int\n   - IsEnabled() bool\n   - DiscoverVersions(ctx context.Context) ([]string, error)\n   - DownloadDistribution(ctx context.Context, version string, destDir string, progress ProgressCallback) (string, error)\n   - VerifyChecksum(ctx context.Context, archivePath string, version string) (bool, error)\n   - HasVersion(version string) (bool, error)\n\n2. Core types:\n   - RepositoryType (nexus, apache)\n   - ProgressCallback func(downloaded int64, total int64)\n   - RepositoryInfo struct (Name, URL, Type, Priority, Enabled, HasAuth, LastChecked, Available)\n   - VersionInfo struct (Version, Source, SourceType)\n\n3. Common error variables:\n   - ErrRepositoryNotFound\n   - ErrRepositoryExists\n   - ErrAuthenticationFailed\n   - ErrVersionNotFound\n   - ErrNoRepositoriesAvailable\n   - ErrInvalidConfiguration\n   - ErrCertificateInvalid\n\n4. RepositoryError struct wrapping errors with repository context\n\n**Restrictions:**\n- Use Go 1.21+ features\n- Follow Go standard error handling patterns\n- Include comprehensive godoc comments\n- Use const for RepositoryType values\n\n**Success Criteria:**\n- Repository interface clearly defines contract for all implementations\n- Types are exported and well-documented\n- Error types provide helpful context\n- Code passes go vet and staticcheck\n\n**Instructions:**\n- When starting this task, mark it as \"In Progress\": [x] In Progress\n- When completed, mark it as \"Completed\": [x] Completed\n```\n\n---\n\n#### Task 2: Create HTTPClient with Retry Logic\n**Status:** [ ] Not Started | [ ] In Progress | [ ] Completed\n\n**Files to Create:**\n- `internal/nexus/http.go`\n\n**Description:** Implement HTTPClient wrapper using go-resty with retry logic, timeout handling, and TLS configuration support.\n\n**Dependencies:** Task 1\n\n**Estimated Effort:** 3 hours\n\n**_Prompt:**\n```\nYou are implementing the HTTPClient wrapper for mvnenv-win's Nexus integration.\n\n**Role:** Senior Go developer with expertise in HTTP clients and error handling.\n\n**Task:** Create internal/nexus/http.go with:\n\n1. HTTPClient struct:\n   - client *resty.Client\n   - timeout time.Duration\n   - retryCount int\n   - retryWait time.Duration\n\n2. NewHTTPClient(timeout time.Duration, tlsConfig *TLSConfig) *HTTPClient\n   - Initialize resty client with timeout\n   - Configure retry: 3 attempts, exponential backoff (1s, 2s, 4s)\n   - Retry on: connection errors, timeouts, 5xx (except 501)\n   - Don't retry on: 4xx (except 429)\n\n3. Get(ctx context.Context, url string, auth *AuthConfig) (*resty.Response, error)\n   - Execute GET with context cancellation\n   - Apply authentication headers if provided\n   - Return response or wrapped error\n\n4. Download(ctx context.Context, url string, destPath string, auth *AuthConfig, progress ProgressCallback) error\n   - Stream download to file\n   - Call progress callback with downloaded/total bytes\n   - Handle context cancellation\n   - Clean up partial file on error\n\n5. SetTLSConfig(tlsConfig *TLSConfig)\n   - Update client TLS configuration\n   - Load custom CA certificates if specified\n   - Set InsecureSkipVerify if configured\n\n6. TLSConfig struct:\n   - Insecure bool\n   - CAFile string\n   - ClientCertFile string (for future)\n   - ClientKeyFile string (for future)\n\n7. AuthConfig struct:\n   - Type AuthType (none, basic, token)\n   - Username string\n   - Password string\n   - Token string\n\n**Restrictions:**\n- Use github.com/go-resty/resty/v2\n- Implement proper context cancellation\n- Clean up resources on error\n- Log retry attempts at DEBUG level\n\n**Success Criteria:**\n- Retry logic works for transient errors\n- Progress callback invoked during downloads\n- TLS configuration properly applied\n- Context cancellation stops requests immediately\n\n**Instructions:**\n- When starting this task, mark it as \"In Progress\": [x] In Progress\n- When completed, mark it as \"Completed\": [x] Completed\n```\n\n---\n\n#### Task 3: Create CredentialManager for Windows Credential Manager\n**Status:** [ ] Not Started | [ ] In Progress | [ ] Completed\n\n**Files to Create:**\n- `internal/nexus/credentials.go`\n- `internal/nexus/credentials_windows.go`\n\n**Description:** Implement secure credential storage using Windows Credential Manager APIs.\n\n**Dependencies:** None\n\n**Estimated Effort:** 3 hours\n\n**_Prompt:**\n```\nYou are implementing secure credential storage for mvnenv-win.\n\n**Role:** Senior Go developer with Windows platform expertise and security focus.\n\n**Task:** Create credential management with Windows Credential Manager integration:\n\n1. internal/nexus/credentials.go:\n   - CredentialManager struct with targetPrefix string\n   - NewCredentialManager() *CredentialManager\n   - Interface methods (to be implemented in platform-specific file)\n\n2. internal/nexus/credentials_windows.go:\n   - StoreCredentials(repoName string, username string, password string) error\n     * Target: \"mvnenv:repo:{repoName}\"\n     * Use CRED_TYPE_GENERIC\n     * Store username in TargetName or Attributes\n     * Store password in CredentialBlob (encrypted by OS)\n\n   - RetrieveCredentials(repoName string) (string, string, error)\n     * Read from Windows Credential Manager\n     * Return username, password\n     * Return error if not found\n\n   - DeleteCredentials(repoName string) error\n     * Remove credential from Windows Credential Manager\n\n   - HasCredentials(repoName string) bool\n     * Check if credential exists without reading it\n\n3. Use github.com/danieljoos/wincred OR syscall to Windows Credential Manager APIs:\n   - CredWriteW for storing\n   - CredReadW for retrieving\n   - CredDeleteW for deletion\n\n4. Error handling:\n   - If Credential Manager unavailable, return descriptive error\n   - Suggest environment variables as fallback in error message\n\n**Restrictions:**\n- Windows-specific code only in *_windows.go\n- Handle credential not found gracefully\n- Never log credentials\n- Use proper Windows API error codes\n\n**Success Criteria:**\n- Credentials stored encrypted by OS\n- Target name format: \"mvnenv:repo:{repoName}\"\n- Retrieval works after restart\n- Deletion removes credentials completely\n\n**Instructions:**\n- When starting this task, mark it as \"In Progress\": [x] In Progress\n- When completed, mark it as \"Completed\": [x] Completed\n```\n\n---\n\n### Core Components\n\n#### Task 4: Create RepositoryConfig for repositories.yaml\n**Status:** [ ] Not Started | [ ] In Progress | [ ] Completed\n\n**Files to Create:**\n- `internal/nexus/config.go`\n\n**Description:** Implement configuration management for repositories.yaml with environment variable substitution.\n\n**Dependencies:** Task 1\n\n**Estimated Effort:** 3 hours\n\n**_Prompt:**\n```\nYou are implementing repository configuration management for mvnenv-win.\n\n**Role:** Senior Go developer with configuration management expertise.\n\n**Task:** Create internal/nexus/config.go with:\n\n1. RepositoryConfig struct:\n   - configPath string\n   - mu sync.RWMutex\n\n2. Config struct (YAML structure):\n   - Repositories []RepositoryEntry\n\n3. RepositoryEntry struct:\n   - Name string\n   - Type RepositoryType\n   - URL string\n   - Priority int\n   - Enabled bool\n   - Auth *AuthConfig (optional)\n   - TLS *TLSConfig (optional)\n\n4. NewRepositoryConfig(configPath string) *RepositoryConfig\n   - Initialize with config file path\n   - Create directory if doesn't exist\n\n5. Load() (*Config, error)\n   - Read YAML file\n   - Parse into Config struct\n   - Apply environment variable substitution\n   - Return default config if file doesn't exist (Apache archive only)\n\n6. Save(config *Config) error\n   - Marshal Config to YAML\n   - Write atomically (temp file + rename)\n   - Preserve file permissions\n\n7. AddRepository(repo RepositoryEntry) error\n   - Validate: name alphanumeric + hyphens/underscores\n   - Validate: URL is valid HTTP/HTTPS\n   - Check if name already exists\n   - Add to repositories list\n   - Save config\n\n8. RemoveRepository(name string) error\n   - Find repository by name\n   - Remove from list\n   - Save config\n   - Return error if not found\n\n9. expandEnvVars(value string) string\n   - Replace ${VAR_NAME} with os.Getenv(VAR_NAME)\n   - Use regex: \\$\\{([A-Z_][A-Z0-9_]*)\\}\n\n**Restrictions:**\n- Use gopkg.in/yaml.v3 for YAML parsing\n- Thread-safe with RWMutex\n- Atomic file writes (temp + rename)\n- Validate repository names (no path traversal)\n\n**Success Criteria:**\n- YAML round-trips correctly\n- Environment variables substituted\n- Default config (Apache archive) provided if no file\n- Concurrent access is safe\n\n**Instructions:**\n- When starting this task, mark it as \"In Progress\": [x] In Progress\n- When completed, mark it as \"Completed\": [x] Completed\n```\n\n---\n\n#### Task 5: Create MetadataCache for Version Caching\n**Status:** [ ] Not Started | [ ] In Progress | [ ] Completed\n\n**Files to Create:**\n- `internal/nexus/metadata.go`\n\n**Description:** Implement metadata caching to reduce network queries with TTL-based freshness checks.\n\n**Dependencies:** Task 1\n\n**Estimated Effort:** 2 hours\n\n**_Prompt:**\n```\nYou are implementing metadata caching for mvnenv-win's repository integration.\n\n**Role:** Senior Go developer with caching and performance optimization expertise.\n\n**Task:** Create internal/nexus/metadata.go with:\n\n1. MetadataCache struct:\n   - cachePath string\n   - ttl time.Duration\n   - mu sync.RWMutex\n\n2. CachedMetadata struct (JSON structure):\n   - Timestamp time.Time\n   - Versions []CachedVersionInfo\n   - Repos map[string]RepoSnapshot\n\n3. CachedVersionInfo struct:\n   - Version string\n   - Source string (repository name)\n   - SourceType RepositoryType\n\n4. RepoSnapshot struct:\n   - URL string\n   - Priority int\n   - Available bool\n   - Timestamp time.Time\n\n5. NewMetadataCache(cachePath string, ttl time.Duration) *MetadataCache\n   - Initialize with cache file path and TTL\n   - Default TTL: 24 hours\n\n6. IsFresh() bool\n   - Load cache file\n   - Check if timestamp within TTL\n   - Return false if file doesn't exist or parse error\n\n7. Load() (*CachedMetadata, error)\n   - Read JSON cache file\n   - Parse into CachedMetadata\n   - Return error if file doesn't exist or corrupt\n\n8. Save(metadata *CachedMetadata) error\n   - Set current timestamp\n   - Marshal to JSON with indentation\n   - Write atomically (temp file + rename)\n\n9. Invalidate() error\n   - Delete cache file\n   - Return nil if file doesn't exist\n\n**Restrictions:**\n- Use encoding/json for JSON parsing\n- Thread-safe with RWMutex\n- Atomic file writes\n- Handle corrupted cache gracefully\n\n**Success Criteria:**\n- Freshness check works with TTL\n- Cache survives process restarts\n- Corrupted cache doesn't break functionality\n- Concurrent access is safe\n\n**Instructions:**\n- When starting this task, mark it as \"In Progress\": [x] In Progress\n- When completed, mark it as \"Completed\": [x] Completed\n```\n\n---\n\n#### Task 6: Create NexusClient Implementation\n**Status:** [ ] Not Started | [ ] In Progress | [ ] Completed\n\n**Files to Create:**\n- `internal/nexus/nexus_client.go`\n\n**Description:** Implement Repository interface for Nexus Repository Manager 2.x and 3.x.\n\n**Dependencies:** Tasks 1, 2, 3\n\n**Estimated Effort:** 4 hours\n\n**_Prompt:**\n```\nYou are implementing NexusClient for mvnenv-win's Nexus integration.\n\n**Role:** Senior Go developer with REST API and Maven repository expertise.\n\n**Task:** Create internal/nexus/nexus_client.go implementing Repository interface:\n\n1. NexusClient struct:\n   - name string\n   - baseURL string\n   - priority int\n   - enabled bool\n   - authType AuthType\n   - httpClient *HTTPClient\n   - credentials *CredentialManager\n   - tlsConfig *TLSConfig\n\n2. NewNexusClient(...) *NexusClient\n   - Initialize all fields\n   - Create HTTPClient with TLS config\n\n3. DiscoverVersions(ctx context.Context) ([]string, error)\n   - URL: {baseURL}/org/apache/maven/apache-maven/maven-metadata.xml\n   - GET request with authentication\n   - Parse XML: <metadata><versioning><versions><version>3.9.4</version>...\n   - Extract all <version> elements\n   - Handle errors: 401/403 (auth failed), 404 (not found), network errors\n\n4. DownloadDistribution(ctx context.Context, version string, destDir string, progress ProgressCallback) (string, error)\n   - URL: {baseURL}/org/apache/maven/apache-maven/{version}/apache-maven-{version}-bin.zip\n   - Destination: {destDir}/apache-maven-{version}-bin.zip\n   - Use httpClient.Download with authentication and progress callback\n   - Verify Content-Type is application/zip or application/octet-stream\n   - Return file path on success\n\n5. VerifyChecksum(ctx context.Context, archivePath string, version string) (bool, error)\n   - URL: {baseURL}/org/apache/maven/apache-maven/{version}/apache-maven-{version}-bin.zip.sha256\n   - Download checksum file\n   - Calculate SHA-256 of archive\n   - Compare checksums\n   - Return true if match, false if mismatch\n   - Return error if checksum file not available\n\n6. HasVersion(version string) (bool, error)\n   - Quick check without full discovery (future optimization)\n   - For now: return false, nil (always query)\n\n7. Name(), Priority(), IsEnabled() - simple getters\n\n8. Authentication handling:\n   - Retrieve credentials from CredentialManager\n   - Fall back to environment variables from config\n   - Apply to httpClient requests\n\n**Restrictions:**\n- Use encoding/xml for XML parsing\n- Handle context cancellation in all network operations\n- Log all network operations at DEBUG level\n- Return wrapped errors with repository name\n\n**Success Criteria:**\n- Successfully parses Nexus metadata XML\n- Downloads distributions with authentication\n- Checksum verification works\n- Clear error messages for auth failures\n\n**Instructions:**\n- When starting this task, mark it as \"In Progress\": [x] In Progress\n- When completed, mark it as \"Completed\": [x] Completed\n```\n\n---\n\n#### Task 7: Create ApacheArchiveClient Implementation\n**Status:** [ ] Not Started | [ ] In Progress | [ ] Completed\n\n**Files to Create:**\n- `internal/nexus/apache_client.go`\n\n**Description:** Implement Repository interface for Apache Maven official archives.\n\n**Dependencies:** Tasks 1, 2\n\n**Estimated Effort:** 3 hours\n\n**_Prompt:**\n```\nYou are implementing ApacheArchiveClient for mvnenv-win.\n\n**Role:** Senior Go developer with web scraping and HTTP client expertise.\n\n**Task:** Create internal/nexus/apache_client.go implementing Repository interface:\n\n1. ApacheArchiveClient struct:\n   - name string\n   - baseURL string (https://archive.apache.org/dist/maven/maven-3/)\n   - priority int\n   - enabled bool\n   - httpClient *HTTPClient\n\n2. NewApacheArchiveClient(name string, priority int) *ApacheArchiveClient\n   - Initialize with Apache archive URL\n   - Create HTTPClient (no auth needed)\n\n3. DiscoverVersions(ctx context.Context) ([]string, error)\n   - GET: https://archive.apache.org/dist/maven/maven-3/\n   - Parse HTML directory listing\n   - Regex pattern: <a href=\"(\\d+\\.\\d+\\.\\d+)/\">\n   - Extract version numbers\n   - Filter to valid semantic versions\n   - Return sorted list\n\n4. DownloadDistribution(ctx context.Context, version string, destDir string, progress ProgressCallback) (string, error)\n   - URL: {baseURL}/{version}/binaries/apache-maven-{version}-bin.zip\n   - Destination: {destDir}/apache-maven-{version}-bin.zip\n   - Use httpClient.Download with progress callback\n   - Return file path on success\n\n5. VerifyChecksum(ctx context.Context, archivePath string, version string) (bool, error)\n   - URL: {baseURL}/{version}/binaries/apache-maven-{version}-bin.zip.sha512\n   - Download checksum file\n   - Calculate SHA-512 of archive\n   - Compare checksums (handle both formats: \"checksum filename\" and just \"checksum\")\n   - Return true if match, false if mismatch\n\n6. HasVersion(version string) (bool, error)\n   - Return false, nil (always query)\n\n7. Name(), Priority(), IsEnabled() - simple getters\n\n**Restrictions:**\n- Use regex for HTML parsing (simple directory listing)\n- No authentication needed\n- Handle missing checksum files gracefully\n- SHA-512 for Apache (not SHA-256)\n\n**Success Criteria:**\n- Successfully scrapes Apache directory listing\n- Downloads distributions correctly\n- SHA-512 checksum verification works\n- No authentication headers sent\n\n**Instructions:**\n- When starting this task, mark it as \"In Progress\": [x] In Progress\n- When completed, mark it as \"Completed\": [x] Completed\n```\n\n---\n\n#### Task 8: Create RepositoryManager\n**Status:** [ ] Not Started | [ ] In Progress | [ ] Completed\n\n**Files to Create:**\n- `internal/nexus/manager.go`\n\n**Description:** Implement RepositoryManager that orchestrates multiple repositories with priority-based selection and fallback.\n\n**Dependencies:** Tasks 1, 4, 5, 6, 7\n\n**Estimated Effort:** 5 hours\n\n**_Prompt:**\n```\nYou are implementing RepositoryManager for mvnenv-win's Nexus integration.\n\n**Role:** Senior Go backend developer with distributed systems expertise.\n\n**Task:** Create internal/nexus/manager.go with:\n\n1. RepositoryManager struct:\n   - repositories []Repository\n   - config *RepositoryConfig\n   - cache *MetadataCache\n   - credentials *CredentialManager\n\n2. NewRepositoryManager(configPath string) (*RepositoryManager, error)\n   - Load config from configPath\n   - Create CredentialManager\n   - Create MetadataCache with 24h TTL\n   - Instantiate Repository implementations from config:\n     * NexusClient for type \"nexus\"\n     * ApacheArchiveClient for type \"apache\"\n   - Add default Apache repository if no config\n   - Sort repositories by priority\n\n3. DiscoverVersions(ctx context.Context, forceRefresh bool) ([]VersionInfo, error)\n   - If cache fresh and !forceRefresh: return cached versions\n   - Query repositories in parallel using goroutines:\n     * One goroutine per enabled repository\n     * Collect results in channel\n     * Wait for all with WaitGroup\n     * Continue on individual failures (log warning)\n   - If all repositories failed: return ErrNoRepositoriesAvailable\n   - Deduplicate versions (keep first = highest priority)\n   - Convert to VersionInfo with source repository\n   - Update cache with results\n   - Return version list\n\n4. DownloadVersion(ctx context.Context, version string, destDir string, progress ProgressCallback) (string, error)\n   - Query cache for repository that provides version\n   - If found: try that repository first\n   - If failed or not in cache: try all repositories in priority order\n   - For each repository:\n     * Call DownloadDistribution\n     * If success: verify checksum (if available), return path\n     * If failure: log error, continue to next\n   - If all failed: return ErrVersionNotFound\n\n5. AddRepository(name string, url string, priority int, repoType RepositoryType) error\n   - Validate name (alphanumeric + hyphens/underscores)\n   - Validate URL format\n   - Check if name exists\n   - Create RepositoryEntry\n   - Add via config.AddRepository\n   - Invalidate cache\n   - Reload repositories\n\n6. RemoveRepository(name string) error\n   - Remove via config.RemoveRepository\n   - Delete credentials via credentials.DeleteCredentials\n   - Invalidate cache\n   - Reload repositories\n\n7. SetAuthentication(repoName string, authType AuthType, credentials interface{}) error\n   - Find repository by name\n   - Store credentials in CredentialManager OR update config with env vars\n   - Update repository auth config\n   - Save config\n\n8. ListRepositories() []RepositoryInfo\n   - Return info for all repositories\n   - Include auth status (without exposing credentials)\n\n9. GetRepository(name string) (Repository, error)\n   - Find and return repository by name\n\n**Restrictions:**\n- Parallel queries with timeout per repository (30s default)\n- Thread-safe operations\n- Proper error wrapping with context\n- Cache invalidation on config changes\n\n**Success Criteria:**\n- Parallel queries improve performance\n- Fallback works when primary repository fails\n- Cache reduces network queries\n- Priority ordering respected\n- Configuration changes take effect immediately\n\n**Instructions:**\n- When starting this task, mark it as \"In Progress\": [x] In Progress\n- When completed, mark it as \"Completed\": [x] Completed\n```\n\n---\n\n### Integration Tasks\n\n#### Task 9: Integrate with core-version-management\n**Status:** [ ] Not Started | [ ] In Progress | [ ] Completed\n\n**Files to Modify:**\n- `internal/version/installer.go`\n- `internal/download/downloader.go`\n\n**Description:** Update VersionInstaller to use RepositoryManager for downloads instead of direct HTTP client.\n\n**Dependencies:** Task 8, core-version-management spec completed\n\n**Estimated Effort:** 2 hours\n\n**_Prompt:**\n```\nYou are integrating Nexus repository support into mvnenv-win's version installer.\n\n**Role:** Senior Go developer with integration and refactoring expertise.\n\n**Task:** Update version installation to use RepositoryManager:\n\n1. Modify internal/version/installer.go:\n   - Add repoManager *nexus.RepositoryManager field to VersionInstaller struct\n   - Update NewVersionInstaller to accept RepositoryManager\n   - Update InstallVersion method:\n     * Replace direct download logic with repoManager.DownloadVersion\n     * Pass progress callback to DownloadVersion\n     * Handle repository errors appropriately\n\n2. Update internal/download/downloader.go (if separate):\n   - Refactor to use RepositoryManager as download source\n   - Maintain progress tracking and error handling\n\n3. Error handling:\n   - Wrap repository errors with installation context\n   - Provide helpful messages: \"version not found in any repository\"\n   - Suggest checking `mvnenv install -l` for available versions\n\n**Restrictions:**\n- Maintain backward compatibility with existing installer tests\n- Preserve progress tracking functionality\n- Don't break atomic installation logic\n\n**Success Criteria:**\n- Version installation works with Nexus repositories\n- Downloads fall back to Apache archive if Nexus fails\n- Progress tracking still works\n- All existing installer tests pass\n\n**Instructions:**\n- When starting this task, mark it as \"In Progress\": [x] In Progress\n- When completed, mark it as \"Completed\": [x] Completed\n```\n\n---\n\n#### Task 10: Integrate with CLI Commands (repo add/list/remove/auth)\n**Status:** [ ] Not Started | [ ] In Progress | [ ] Completed\n\n**Files to Modify:**\n- `cmd/mvnenv/cmd/repo_add.go`\n- `cmd/mvnenv/cmd/repo_list.go`\n- `cmd/mvnenv/cmd/repo_remove.go`\n- `cmd/mvnenv/cmd/repo_auth.go`\n\n**Description:** Wire up CLI commands to use RepositoryManager for repository management operations.\n\n**Dependencies:** Task 8, cli-commands spec completed\n\n**Estimated Effort:** 2 hours\n\n**_Prompt:**\n```\nYou are implementing CLI command handlers for repository management in mvnenv-win.\n\n**Role:** Senior Go developer with CLI application expertise.\n\n**Task:** Wire up repository CLI commands to RepositoryManager:\n\n1. cmd/mvnenv/cmd/repo_add.go:\n   - Parse: name, url, --priority, --type flags\n   - Create RepositoryManager\n   - Call repoManager.AddRepository\n   - Output: \"Repository '{name}' added successfully\"\n   - Handle errors with clear messages\n\n2. cmd/mvnenv/cmd/repo_list.go:\n   - Create RepositoryManager\n   - Call repoManager.ListRepositories\n   - Format output as table:\n     NAME            TYPE     URL                              PRIORITY  ENABLED  AUTH\n     corporate-nexus nexus    https://nexus.company.com/...    1         yes      yes\n     apache          apache   https://archive.apache.org/...   100       yes      no\n   - Indicate current/active repository with marker\n\n3. cmd/mvnenv/cmd/repo_remove.go:\n   - Parse: name argument\n   - Create RepositoryManager\n   - Call repoManager.RemoveRepository\n   - Output: \"Repository '{name}' removed successfully\"\n   - Also note: \"Credentials removed from Windows Credential Manager\"\n\n4. cmd/mvnenv/cmd/repo_auth.go:\n   - Parse: name, --username, --password, --token flags\n   - Prompt for password if not provided (hidden input)\n   - Create RepositoryManager\n   - Determine AuthType from flags\n   - Call repoManager.SetAuthentication\n   - Output: \"Authentication configured for repository '{name}'\"\n   - Never log credentials\n\n**Restrictions:**\n- Follow pyenv-win-style plain text output (no emojis)\n- Use tabwriter for aligned columns\n- Hide password input (use terminal.ReadPassword)\n- Clear error messages matching requirements.md\n\n**Success Criteria:**\n- Commands match pyenv-win style\n- Table output is properly aligned\n- Password input is hidden\n- All repository operations work end-to-end\n\n**Instructions:**\n- When starting this task, mark it as \"In Progress\": [x] In Progress\n- When completed, mark it as \"Completed\": [x] Completed\n```\n\n---\n\n### Testing Tasks\n\n#### Task 11: Unit Tests for NexusClient\n**Status:** [ ] Not Started | [ ] In Progress | [ ] Completed\n\n**Files to Create:**\n- `internal/nexus/nexus_client_test.go`\n\n**Description:** Comprehensive unit tests for NexusClient including metadata parsing and download operations.\n\n**Dependencies:** Task 6\n\n**Estimated Effort:** 3 hours\n\n**_Prompt:**\n```\nYou are writing unit tests for NexusClient in mvnenv-win.\n\n**Role:** Senior Go developer with testing expertise and TDD mindset.\n\n**Task:** Create internal/nexus/nexus_client_test.go with comprehensive test coverage:\n\n1. TestNexusClient_DiscoverVersions:\n   - Mock HTTP server returning maven-metadata.xml\n   - Verify versions correctly parsed\n   - Test: valid XML with multiple versions\n   - Test: empty versions list\n   - Test: malformed XML (error handling)\n   - Test: 404 response (not found)\n   - Test: 401/403 response (auth failed)\n\n2. TestNexusClient_DownloadDistribution:\n   - Mock HTTP server serving ZIP file\n   - Verify file downloaded to correct path\n   - Test: successful download with progress callback\n   - Test: context cancellation mid-download\n   - Test: 404 response (version not found)\n   - Test: authentication header included\n\n3. TestNexusClient_VerifyChecksum:\n   - Mock server with .sha256 file\n   - Test: valid checksum (match)\n   - Test: invalid checksum (mismatch)\n   - Test: checksum file not available (graceful handling)\n\n4. TestNexusClient_Authentication:\n   - Test: basic auth headers correctly set\n   - Test: token auth (Bearer token)\n   - Test: credential retrieval from CredentialManager\n   - Test: fallback to environment variables\n\n**Restrictions:**\n- Use httptest.Server for mock HTTP server\n- Use testify/assert for assertions\n- Test all error paths\n- Achieve >90% code coverage\n\n**Success Criteria:**\n- All tests pass\n- Code coverage >90%\n- Tests are deterministic and fast (<1s total)\n- Mock server properly simulates Nexus responses\n\n**Instructions:**\n- When starting this task, mark it as \"In Progress\": [x] In Progress\n- When completed, mark it as \"Completed\": [x] Completed\n```\n\n---\n\n#### Task 12: Unit Tests for ApacheArchiveClient\n**Status:** [ ] Not Started | [ ] In Progress | [ ] Completed\n\n**Files to Create:**\n- `internal/nexus/apache_client_test.go`\n\n**Description:** Unit tests for ApacheArchiveClient including directory scraping and SHA-512 verification.\n\n**Dependencies:** Task 7\n\n**Estimated Effort:** 2 hours\n\n**_Prompt:**\n```\nYou are writing unit tests for ApacheArchiveClient in mvnenv-win.\n\n**Role:** Senior Go developer with testing expertise.\n\n**Task:** Create internal/nexus/apache_client_test.go with:\n\n1. TestApacheArchiveClient_DiscoverVersions:\n   - Mock Apache archive HTML directory listing\n   - Test: parse versions from HTML links\n   - Test: filter invalid version formats\n   - Test: handle network errors gracefully\n\n2. TestApacheArchiveClient_DownloadDistribution:\n   - Mock server serving ZIP file\n   - Verify download path construction\n   - Test: successful download\n   - Test: 404 response (version not available)\n\n3. TestApacheArchiveClient_VerifyChecksum:\n   - Mock server with .sha512 file\n   - Test: SHA-512 verification (match)\n   - Test: SHA-512 verification (mismatch)\n   - Test: both checksum formats (\"checksum filename\" and \"checksum\")\n\n**Restrictions:**\n- Use httptest.Server\n- Test HTML parsing with various directory formats\n- SHA-512 (not SHA-256) for Apache\n\n**Success Criteria:**\n- All tests pass\n- Directory scraping handles format variations\n- SHA-512 verification correct\n- Code coverage >90%\n\n**Instructions:**\n- When starting this task, mark it as \"In Progress\": [x] In Progress\n- When completed, mark it as \"Completed\": [x] Completed\n```\n\n---\n\n#### Task 13: Unit Tests for RepositoryManager\n**Status:** [ ] Not Started | [ ] In Progress | [ ] Completed\n\n**Files to Create:**\n- `internal/nexus/manager_test.go`\n\n**Description:** Unit tests for RepositoryManager including priority ordering, fallback, and caching.\n\n**Dependencies:** Task 8\n\n**Estimated Effort:** 4 hours\n\n**_Prompt:**\n```\nYou are writing unit tests for RepositoryManager in mvnenv-win.\n\n**Role:** Senior Go developer with expertise in testing complex orchestration logic.\n\n**Task:** Create internal/nexus/manager_test.go with:\n\n1. TestRepositoryManager_DiscoverVersions_Parallel:\n   - Mock multiple repositories\n   - Verify parallel queries (use timing to confirm)\n   - Test: combine results from multiple repos\n   - Test: deduplicate versions (keep highest priority)\n\n2. TestRepositoryManager_DiscoverVersions_Cache:\n   - Test: fresh cache returns cached versions (no network)\n   - Test: stale cache triggers refresh\n   - Test: forceRefresh bypasses cache\n\n3. TestRepositoryManager_DiscoverVersions_Fallback:\n   - Mock: first repo fails, second succeeds\n   - Verify: result contains versions from second repo\n   - Test: all repos fail -> ErrNoRepositoriesAvailable\n\n4. TestRepositoryManager_DownloadVersion_Priority:\n   - Mock: version available in multiple repos\n   - Verify: highest priority repo tried first\n   - Test: primary fails, fallback to secondary\n\n5. TestRepositoryManager_DownloadVersion_CacheLookup:\n   - Populate cache with version sources\n   - Verify: cache consulted first\n   - Test: cached source used preferentially\n\n6. TestRepositoryManager_AddRepository:\n   - Test: valid repository added successfully\n   - Test: duplicate name rejected\n   - Test: invalid name rejected (path traversal)\n   - Test: invalid URL rejected\n\n7. TestRepositoryManager_RemoveRepository:\n   - Test: existing repository removed\n   - Test: credentials also deleted\n   - Test: non-existent repository -> error\n\n8. TestRepositoryManager_SetAuthentication:\n   - Test: credentials stored in CredentialManager\n   - Test: environment variable reference stored in config\n\n**Restrictions:**\n- Use mock Repository implementations\n- Test concurrency correctness (no race conditions)\n- Verify cache invalidation on config changes\n- Use testify/mock for mocking\n\n**Success Criteria:**\n- All tests pass\n- Priority ordering verified\n- Parallel queries confirmed\n- Cache behavior correct\n- Code coverage >90%\n\n**Instructions:**\n- When starting this task, mark it as \"In Progress\": [x] In Progress\n- When completed, mark it as \"Completed\": [x] Completed\n```\n\n---\n\n#### Task 14: Unit Tests for CredentialManager\n**Status:** [ ] Not Started | [ ] In Progress | [ ] Completed\n\n**Files to Create:**\n- `internal/nexus/credentials_test.go`\n\n**Description:** Unit tests for Windows Credential Manager integration.\n\n**Dependencies:** Task 3\n\n**Estimated Effort:** 2 hours\n\n**_Prompt:**\n```\nYou are writing unit tests for CredentialManager in mvnenv-win.\n\n**Role:** Senior Go developer with Windows platform testing expertise.\n\n**Task:** Create internal/nexus/credentials_test.go:\n\n1. TestCredentialManager_StoreAndRetrieve:\n   - Store credentials with StoreCredentials\n   - Retrieve with RetrieveCredentials\n   - Verify: username and password match\n\n2. TestCredentialManager_TargetNameFormat:\n   - Verify target: \"mvnenv:repo:{repoName}\"\n   - Test with various repository names\n\n3. TestCredentialManager_Delete:\n   - Store credentials\n   - Delete with DeleteCredentials\n   - Verify: retrieval fails after deletion\n\n4. TestCredentialManager_HasCredentials:\n   - Test: returns true after store\n   - Test: returns false after delete\n   - Test: returns false for non-existent\n\n5. TestCredentialManager_NotFound:\n   - Retrieve non-existent credentials\n   - Verify: appropriate error returned\n\n**Restrictions:**\n- Tests must run on Windows only (build tag: //go:build windows)\n- Clean up all test credentials after each test\n- Use unique repository names per test (avoid conflicts)\n- May require admin setup for CI (document if needed)\n\n**Success Criteria:**\n- All tests pass on Windows\n- Credentials stored and retrieved correctly\n- Cleanup prevents test pollution\n- Target name format correct\n\n**Instructions:**\n- When starting this task, mark it as \"In Progress\": [x] In Progress\n- When completed, mark it as \"Completed\": [x] Completed\n```\n\n---\n\n#### Task 15: Unit Tests for MetadataCache\n**Status:** [ ] Not Started | [ ] In Progress | [ ] Completed\n\n**Files to Create:**\n- `internal/nexus/metadata_test.go`\n\n**Description:** Unit tests for metadata caching with TTL and invalidation.\n\n**Dependencies:** Task 5\n\n**Estimated Effort:** 2 hours\n\n**_Prompt:**\n```\nYou are writing unit tests for MetadataCache in mvnenv-win.\n\n**Role:** Senior Go developer with caching expertise.\n\n**Task:** Create internal/nexus/metadata_test.go:\n\n1. TestMetadataCache_SaveAndLoad:\n   - Create CachedMetadata\n   - Save with Save()\n   - Load with Load()\n   - Verify: data matches\n\n2. TestMetadataCache_IsFresh_TTL:\n   - Save metadata\n   - Test: IsFresh() returns true immediately\n   - Test: IsFresh() returns false after TTL expires (use short TTL like 1ms)\n\n3. TestMetadataCache_IsFresh_NoCache:\n   - Test: IsFresh() returns false when cache doesn't exist\n\n4. TestMetadataCache_Invalidate:\n   - Save metadata\n   - Invalidate()\n   - Verify: cache file deleted\n   - Verify: IsFresh() returns false\n\n5. TestMetadataCache_CorruptedCache:\n   - Write invalid JSON to cache file\n   - Test: Load() returns error\n   - Test: IsFresh() handles gracefully\n\n6. TestMetadataCache_ConcurrentAccess:\n   - Spawn multiple goroutines\n   - Concurrent Save() and Load() calls\n   - Verify: no race conditions\n\n**Restrictions:**\n- Use temp directory for test cache files\n- Clean up cache files after tests\n- Test with short TTL for fast tests\n- Use t.Parallel() where appropriate\n\n**Success Criteria:**\n- All tests pass\n- TTL expiration works correctly\n- Corrupted cache handled gracefully\n- No race conditions under concurrent access\n\n**Instructions:**\n- When starting this task, mark it as \"In Progress\": [x] In Progress\n- When completed, mark it as \"Completed\": [x] Completed\n```\n\n---\n\n#### Task 16: Integration Tests\n**Status:** [ ] Not Started | [ ] In Progress | [ ] Completed\n\n**Files to Create:**\n- `test/integration/nexus_integration_test.go`\n\n**Description:** End-to-end integration tests with mock Nexus server or real Apache archive.\n\n**Dependencies:** Tasks 8, 9, 10\n\n**Estimated Effort:** 4 hours\n\n**_Prompt:**\n```\nYou are writing integration tests for Nexus repository integration in mvnenv-win.\n\n**Role:** Senior Go developer with integration testing expertise.\n\n**Task:** Create test/integration/nexus_integration_test.go:\n\n1. TestIntegration_AddAndListRepositories:\n   - Start with clean config\n   - Add Nexus repository via CLI command\n   - List repositories via CLI command\n   - Verify: repository appears in list\n\n2. TestIntegration_ConfigureAuthentication:\n   - Add repository\n   - Configure authentication via CLI\n   - Verify: credentials stored in Windows Credential Manager\n   - List repositories: verify auth status shown\n\n3. TestIntegration_DiscoverVersions_ApacheArchive:\n   - Use real Apache archive (or mock server)\n   - Call DiscoverVersions\n   - Verify: returns list of Maven versions\n   - Verify: versions are valid semantic versions\n\n4. TestIntegration_DownloadAndInstall:\n   - Add test repository (mock server with small archive)\n   - Install Maven version via VersionInstaller\n   - Verify: distribution downloaded\n   - Verify: checksum verified\n   - Verify: version installed correctly\n\n5. TestIntegration_Fallback:\n   - Configure: high-priority repo that fails, low-priority Apache\n   - Install Maven version\n   - Verify: falls back to Apache archive\n   - Verify: installation succeeds\n\n6. TestIntegration_CacheRefresh:\n   - Call install -l (list available)\n   - Verify: cache created\n   - Call install -l again\n   - Verify: cache used (no network query)\n   - Call update command\n   - Verify: cache refreshed\n\n7. TestIntegration_RemoveRepository:\n   - Add repository with credentials\n   - Remove repository via CLI\n   - Verify: repository gone from config\n   - Verify: credentials removed from Windows Credential Manager\n\n**Restrictions:**\n- Use temporary directories for test installations\n- Clean up test data after each test\n- Real Apache archive access acceptable (read-only)\n- Mock Nexus server for write operations\n- Tests should be skippable in offline mode\n\n**Success Criteria:**\n- Full workflow tested end-to-end\n- Real network interactions work (Apache archive)\n- Mock server simulates Nexus correctly\n- Cleanup prevents test pollution\n\n**Instructions:**\n- When starting this task, mark it as \"In Progress\": [x] In Progress\n- When completed, mark it as \"Completed\": [x] Completed\n```\n\n---\n\n### Documentation and Finalization\n\n#### Task 17: Create Package Documentation\n**Status:** [ ] Not Started | [ ] In Progress | [ ] Completed\n\n**Files to Create:**\n- `internal/nexus/doc.go`\n\n**Description:** Package-level documentation with overview and usage examples.\n\n**Dependencies:** All implementation tasks completed\n\n**Estimated Effort:** 1 hour\n\n**_Prompt:**\n```\nYou are writing package documentation for mvnenv-win's Nexus integration.\n\n**Role:** Technical writer with Go documentation expertise.\n\n**Task:** Create internal/nexus/doc.go with:\n\n1. Package overview:\n   - Purpose: Maven repository integration (Nexus, Apache archive)\n   - Key capabilities: discovery, download, authentication, caching\n   - Architecture: Repository pattern with pluggable implementations\n\n2. Usage examples:\n   - Creating RepositoryManager\n   - Adding Nexus repository with authentication\n   - Discovering versions\n   - Downloading distributions\n   - Configuring repositories\n\n3. Code example:\n```go\n// Example: Configure and use repository manager\nmanager, err := nexus.NewRepositoryManager(configPath)\nif err != nil {\n    log.Fatal(err)\n}\n\n// Add Nexus repository\nerr = manager.AddRepository(\"corporate\", \"https://nexus.company.com/repo\", 1, nexus.RepositoryTypeNexus)\n\n// Configure authentication\nerr = manager.SetAuthentication(\"corporate\", nexus.AuthTypeBasic, map[string]string{\n    \"username\": \"user\",\n    \"password\": \"pass\",\n})\n\n// Discover available versions\nversions, err := manager.DiscoverVersions(context.Background(), false)\n\n// Download specific version\npath, err := manager.DownloadVersion(context.Background(), \"3.9.4\", \"/tmp\", nil)\n```\n\n4. Security considerations:\n   - Credential storage in Windows Credential Manager\n   - TLS certificate validation\n   - Environment variable substitution\n\n**Restrictions:**\n- Follow godoc conventions\n- Keep examples concise and runnable\n- Include links to key types and functions\n\n**Success Criteria:**\n- Package documentation renders correctly in godoc\n- Examples are accurate and helpful\n- Security considerations clearly stated\n\n**Instructions:**\n- When starting this task, mark it as \"In Progress\": [x] In Progress\n- When completed, mark it as \"Completed\": [x] Completed\n```\n\n---\n\n#### Task 18: Final Review and Error Message Audit\n**Status:** [ ] Not Started | [ ] In Progress | [ ] Completed\n\n**Files to Review:**\n- All implementation files in `internal/nexus/`\n- All CLI command files referencing repositories\n\n**Description:** Comprehensive review ensuring all error messages are clear, actionable, and match requirements.\n\n**Dependencies:** All previous tasks completed\n\n**Estimated Effort:** 2 hours\n\n**_Prompt:**\n```\nYou are conducting a final review of the Nexus integration implementation for mvnenv-win.\n\n**Role:** Senior Go developer and technical reviewer.\n\n**Task:** Review all implementation for completeness and quality:\n\n1. Error Message Audit:\n   - Review all error messages in internal/nexus/\n   - Verify: errors include repository name context\n   - Verify: errors are actionable (suggest next steps)\n   - Examples:\n     * \"authentication failed for repository 'corporate-nexus': 401 Unauthorized. Check credentials with 'mvnenv repo auth corporate-nexus'\"\n     * \"version '3.9.999' not found in any repository. List available versions with 'mvnenv install -l'\"\n     * \"repository 'myrepo' already exists. Use 'mvnenv repo remove myrepo' to remove it first\"\n\n2. Requirements Verification:\n   - Check requirements.md against implementation\n   - Verify all acceptance criteria met\n   - Document any deviations or limitations\n\n3. Code Quality:\n   - Run go vet on all nexus package files\n   - Run staticcheck\n   - Run golangci-lint\n   - Fix any issues found\n\n4. Test Coverage:\n   - Run: go test -cover ./internal/nexus/...\n   - Verify: coverage >90%\n   - Add tests for any uncovered critical paths\n\n5. Documentation:\n   - Verify all exported functions have godoc comments\n   - Check that package doc.go is complete\n   - Ensure README or usage docs updated\n\n6. Integration Points:\n   - Verify core-version-management integration works\n   - Verify CLI commands work end-to-end\n   - Test manual workflow: add repo, configure auth, install version\n\n**Success Criteria:**\n- All requirements acceptance criteria met\n- Error messages clear and actionable\n- Code quality checks pass (vet, staticcheck, lint)\n- Test coverage >90%\n- Documentation complete\n\n**Instructions:**\n- When starting this task, mark it as \"In Progress\": [x] In Progress\n- When completed, mark it as \"Completed\": [x] Completed\n```\n\n---\n\n## Summary\n\n**Total Tasks:** 18\n**Estimated Total Effort:** 48 hours\n\n**Task Dependencies Flow:**\n```\nFoundation (Tasks 1-3)\n    ↓\nCore Components (Tasks 4-8)\n    ↓\nIntegration (Tasks 9-10)\n    ↓\nTesting (Tasks 11-16)\n    ↓\nDocumentation (Tasks 17-18)\n```\n\n**Critical Path:**\nTask 1 → Task 2 → Task 6 → Task 8 → Task 9 → Task 16 → Task 18\n\n**Parallel Work Opportunities:**\n- Tasks 4, 5 can be done in parallel with Task 2\n- Task 7 can be done in parallel with Task 6\n- Tasks 11, 12, 14, 15 (unit tests) can be done in parallel after respective implementations\n- Tasks 9, 10 (integrations) can be done in parallel\n",
  "fileStats": {
    "size": 42956,
    "lines": 1397,
    "lastModified": "2025-10-12T07:08:54.635Z"
  },
  "comments": []
}