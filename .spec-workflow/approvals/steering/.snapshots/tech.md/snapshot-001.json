{
  "id": "snapshot_1760197314547_z04o8mt4g",
  "approvalId": "approval_1760197314515_rga1a09xb",
  "approvalTitle": "Technical Steering Document (tech.md)",
  "version": 1,
  "timestamp": "2025-10-11T15:41:54.547Z",
  "trigger": "initial",
  "status": "pending",
  "content": "# Technology Stack\n\n## Project Type\n**Command-Line Tool** - A native Windows console application for managing multiple Apache Maven installations with version switching capabilities, shim-based command interception, and private repository integration.\n\n## Core Technologies\n\n### Primary Language(s)\n- **Language**: Go (Golang) 1.21+\n- **Runtime/Compiler**: Go compiler with CGO disabled for pure Go binaries\n- **Language-specific tools**:\n  - Go modules for dependency management\n  - Go build toolchain for compilation and cross-compilation\n  - Go test framework for unit and integration testing\n\n**Rationale**: Go was chosen for its excellent cross-platform compilation, single-binary distribution, fast execution speed, and strong standard library support for file operations, HTTP clients, and command-line parsing.\n\n### Key Dependencies/Libraries\n\n#### CLI Framework & Configuration\n- **github.com/spf13/cobra**: Command-line interface framework providing structured command parsing, help generation, and subcommand organization\n- **github.com/spf13/viper**: Configuration management supporting YAML/TOML files, environment variables, and configuration merging\n\n#### HTTP & Network\n- **github.com/go-resty/resty/v2**: HTTP client for Nexus API communication with retry logic, authentication, and response handling\n- **net/http**: Go standard library for HTTP operations and download management\n\n#### Data Formats & Serialization\n- **gopkg.in/yaml.v3**: YAML parsing for configuration files (config.yaml, repositories.yaml)\n- **encoding/json**: Standard library JSON handling for API responses and metadata\n\n#### File Operations & Compression\n- **archive/zip**: Standard library for extracting Maven distribution archives\n- **path/filepath**: Cross-platform file path manipulation\n- **os**: File system operations, environment variables, and process management\n\n#### Security & Cryptography\n- **crypto/sha256**: Checksum verification for downloaded Maven distributions\n- **crypto/tls**: TLS/SSL certificate handling for secure Nexus connections\n- **Windows Credential Manager integration**: Secure credential storage (via syscall or third-party library)\n\n### Application Architecture\n\n**Modular Command-Line Architecture** with the following design patterns:\n\n- **Command Pattern**: Each command (install, uninstall, global, local) is implemented as a discrete command module using Cobra\n- **Shim Architecture**: Lightweight proxy executables intercept Maven commands and delegate to the appropriate version\n- **Repository Pattern**: Abstraction layer for Maven distribution sources (Apache, Nexus) with pluggable implementations\n- **Version Resolution Strategy**: Hierarchical version selection (shell > local > global) with explicit resolution logging\n- **Configuration Singleton**: Centralized configuration management through Viper with lazy loading\n\n#### Component Structure\n```\nmvnenv-win/\n├── cmd/\n│   ├── mvnenv/          # Main CLI entry point with command registration\n│   └── shim/            # Shim executable for Maven command interception\n├── internal/            # Private application code\n│   ├── config/          # Configuration loading, validation, and management\n│   ├── download/        # HTTP download with progress tracking and resume\n│   ├── environment/     # PATH and MAVEN_HOME manipulation\n│   ├── nexus/           # Nexus repository client with authentication\n│   ├── shim/            # Shim generation and management\n│   └── version/         # Version parsing, comparison, and resolution\n├── pkg/                 # Public reusable packages\n│   └── maven/           # Maven-specific utilities (version parsing, paths)\n└── test/                # Test suites and fixtures\n```\n\n### Data Storage\n\n#### Primary Storage\n- **File system**: All data stored in `%USERPROFILE%\\.mvnenv\\` directory structure\n- **Configuration files**: YAML format for human readability and editability\n- **Version files**: Plain text `.maven-version` files for project-specific versions\n\n#### Storage Layout\n```\n%USERPROFILE%\\.mvnenv\\\n├── versions/            # Extracted Maven installations (one directory per version)\n├── cache/               # Downloaded distribution archives\n├── config/              # config.yaml, repositories.yaml\n├── logs/                # Operation logs\n├── bin/                 # mvnenv executable\n└── shims/               # Generated shim executables (mvn.exe, mvn.cmd)\n```\n\n#### Caching Strategy\n- **Distribution cache**: Downloaded Maven archives cached indefinitely\n- **Repository metadata**: Available versions list cached with TTL (configurable, default 24h)\n- **Version resolution cache**: In-memory cache of resolved versions per directory (process lifetime)\n\n#### Data Formats\n- **YAML**: Configuration files for human readability\n- **Plain text**: Version files (.maven-version)\n- **ZIP**: Maven distribution format\n- **JSON**: Nexus API responses and internal metadata\n\n### External Integrations\n\n#### APIs\n- **Apache Maven Archive**: HTTP-based download from archive.apache.org\n- **Sonatype Nexus Repository Manager**: REST API for version discovery and distribution download\n  - Metadata queries: `/repository/{name}/org/apache/maven/apache-maven/maven-metadata.xml`\n  - Artifact downloads: `/repository/{name}/org/apache/maven/apache-maven/{version}/apache-maven-{version}-bin.zip`\n\n#### Protocols\n- **HTTP/HTTPS**: Primary protocol for Maven distribution downloads\n- **REST**: Nexus Repository Manager REST API\n- **File system**: Local version management and configuration\n\n#### Authentication\n- **Basic Authentication**: Username/password for Nexus repositories\n- **Token Authentication**: Bearer tokens for modern Nexus deployments\n- **Environment Variables**: Credential injection via `${VAR}` syntax in configuration\n- **Windows Credential Manager**: Secure credential storage (optional, recommended)\n\n### Monitoring & Dashboard Technologies\nNot applicable - mvnenv-win is a command-line tool without a persistent dashboard. Monitoring is achieved through:\n- **CLI output**: Rich terminal output with color coding and formatting\n- **Log files**: Structured logging to `%USERPROFILE%\\.mvnenv\\logs\\`\n- **Status commands**: `mvnenv version`, `mvnenv versions`, `mvnenv which` for state inspection\n\n## Development Environment\n\n### Build & Development Tools\n- **Build System**: Go build system with Makefile for convenience commands\n- **Package Management**: Go modules (go.mod, go.sum)\n- **Development workflow**:\n  - `go run` for rapid iteration during development\n  - `go build` for local binary compilation\n  - `make` for common development tasks (build, test, lint, clean)\n- **Cross-compilation**: Go's built-in cross-compilation for Windows 32/64-bit\n\n### Code Quality Tools\n- **Static Analysis**:\n  - `go vet` for code correctness\n  - `staticcheck` for advanced static analysis\n  - `golangci-lint` as meta-linter aggregator\n- **Formatting**:\n  - `gofmt` for standard Go formatting\n  - `goimports` for import organization\n- **Testing Framework**:\n  - `go test` for unit tests\n  - `testify/assert` for test assertions\n  - `testify/mock` for mocking dependencies\n  - Integration tests using temporary file systems\n- **Documentation**:\n  - `godoc` for package documentation\n  - Markdown for user-facing documentation\n\n### Version Control & Collaboration\n- **VCS**: Git\n- **Branching Strategy**: GitHub Flow (feature branches, main branch, pull requests)\n- **Code Review Process**:\n  - Pull request-based reviews on GitHub\n  - Required CI checks (tests, linting) before merge\n  - At least one approval required for merge\n\n## Deployment & Distribution\n\n### Target Platform(s)\n- **Primary**: Windows 10+ (64-bit)\n- **Architecture**: AMD64 (x86-64)\n- **Future**: Windows 32-bit, Windows ARM64 (if demand exists)\n\n### Distribution Method\n1. **GitHub Releases**: Primary distribution channel with pre-built binaries\n2. **PowerShell Install Script**: Automated installation via `install-mvnenv-win.ps1`\n3. **Chocolatey**: Windows package manager for enterprise deployments\n4. **Scoop**: Developer-focused Windows package manager\n5. **Go Install**: Direct installation via `go install` for Go developers\n\n### Installation Requirements\n- **Operating System**: Windows 10 version 1809+ or Windows 11\n- **Disk Space**: ~100MB for mvnenv-win + ~10MB per Maven version\n- **Network**: Internet access for downloading Maven distributions\n- **Permissions**: User-level permissions (no administrator required)\n- **PATH modification**: User PATH updated during installation\n\n### Update Mechanism\n- **Self-update command**: `mvnenv self-update` checks GitHub releases and updates in-place\n- **Package manager updates**: Chocolatey/Scoop update mechanisms\n- **Manual update**: Download and replace executable\n\n## Technical Requirements & Constraints\n\n### Performance Requirements\n- **Version switching**: <100ms for `mvnenv global/local/shell` commands\n- **Shim execution overhead**: <50ms from command invocation to Maven execution\n- **Maven installation**: Limited by network speed and disk I/O (~30-60 seconds for typical version)\n- **Memory footprint**: <50MB resident memory during normal operation\n- **Startup time**: <200ms for command parsing and initialization\n\n### Compatibility Requirements\n\n#### Platform Support\n- **Operating Systems**: Windows 10 (1809+), Windows 11, Windows Server 2019+\n- **Architectures**: x86-64 (AMD64) required\n- **Shell Support**:\n  - PowerShell 5.1+\n  - PowerShell Core 7+\n  - Command Prompt (cmd.exe)\n  - Windows Terminal\n  - ConEmu, cmder, and other terminal emulators\n\n#### Dependency Versions\n- **Go**: 1.21 minimum for development and compilation\n- **Maven**: Supports Maven 3.0.0+ versions (primary focus on 3.6+ and 3.8+)\n- **Nexus**: Compatible with Nexus Repository Manager 2.x and 3.x\n\n#### Standards Compliance\n- **Windows PATH**: Follows Windows path resolution conventions\n- **Exit codes**: Standard Unix-style exit codes (0 = success, non-zero = error)\n- **Semantic Versioning**: Maven version parsing and comparison follows SemVer principles\n\n### Security & Compliance\n\n#### Security Requirements\n- **Checksum Verification**: SHA-256 checksum validation for all downloaded distributions\n- **TLS/SSL Verification**: Certificate validation for HTTPS connections (no insecure modes)\n- **Credential Storage**: Windows Credential Manager for secure password storage\n- **Configuration Security**: File permissions restricting config access to user account\n- **No Elevation**: Explicitly designed to run without administrator privileges\n\n#### Compliance Standards\n- **No PII Collection**: No personally identifiable information collected or transmitted\n- **Opt-in Telemetry**: If telemetry added in future, must be opt-in with clear disclosure\n- **Offline Mode**: Full functionality without internet access (except downloads)\n\n#### Threat Model\n- **Man-in-the-Middle**: Mitigated by TLS certificate validation\n- **Malicious Distributions**: Mitigated by checksum verification\n- **Credential Theft**: Mitigated by Windows Credential Manager usage\n- **PATH Hijacking**: Mitigated by shim directory ordering and integrity checks\n\n### Scalability & Reliability\n\n#### Expected Load\n- **Concurrent Versions**: 10-50 Maven versions per installation (realistic: 3-5)\n- **Repository Count**: 1-10 configured Nexus repositories\n- **Concurrent Operations**: Single-user, single-process model (no concurrency requirements)\n\n#### Availability Requirements\n- **Offline Operation**: Core functionality (version switching) must work offline\n- **Graceful Degradation**: Repository unavailability should not break local operations\n- **Atomic Operations**: Version installations are transactional (rollback on failure)\n\n#### Growth Projections\n- **Version Storage**: Linear growth based on number of installed versions (~10MB per version)\n- **Cache Growth**: Bounded by user-initiated installations (no unbounded cache growth)\n\n## Technical Decisions & Rationale\n\n### Decision Log\n\n#### 1. Go Language Selection\n**Decision**: Use Go as the primary implementation language instead of Python, Batch, or PowerShell.\n\n**Rationale**:\n- Single-binary distribution eliminates runtime dependencies (no Python interpreter required)\n- Fast execution speed meets performance requirements (<100ms version switching)\n- Excellent cross-compilation support for future multi-platform expansion\n- Strong standard library for file operations, HTTP, and ZIP handling\n- Better maintainability than batch scripts or shell scripts\n\n**Alternatives Considered**:\n- Python: Requires Python runtime, slower execution, dependency management complexity\n- PowerShell: Windows-only, slower startup, version compatibility issues\n- Batch scripts: Limited functionality, poor error handling, difficult to maintain\n\n#### 2. Shim-Based Architecture\n**Decision**: Use shim executables to intercept Maven commands rather than PATH manipulation alone.\n\n**Rationale**:\n- Transparent to users (no need to remember to run special commands)\n- Allows per-directory version resolution automatically\n- Enables shell-specific overrides without modifying global state\n- Provides consistent behavior across different shell environments\n\n**Alternatives Considered**:\n- Shell aliases: Not portable across shells, requires shell-specific configuration\n- Wrapper scripts: Similar to shims but less transparent\n- Direct PATH manipulation: Requires manual switching, error-prone\n\n#### 3. YAML Configuration Format\n**Decision**: Use YAML for configuration files instead of JSON, TOML, or INI.\n\n**Rationale**:\n- Human-readable and easily editable by hand\n- Support for comments (important for configuration documentation)\n- Widely adopted in DevOps and configuration management tools\n- Better multi-line string support than JSON\n\n**Alternatives Considered**:\n- JSON: Less human-friendly, no comment support\n- TOML: Less familiar to average users, more verbose for nested structures\n- INI: Too simplistic for hierarchical configuration needs\n\n#### 4. User-Level Installation\n**Decision**: Install in `%USERPROFILE%` without requiring administrator elevation.\n\n**Rationale**:\n- Easier enterprise adoption (no IT approval for admin rights)\n- Safer security model (limited blast radius)\n- Aligns with modern development tools (pyenv, rbenv, nvm)\n- Per-user isolation prevents conflicts in multi-user systems\n\n**Trade-offs Accepted**:\n- Cannot be installed system-wide easily\n- Each user needs separate installation\n\n#### 5. Windows Credential Manager for Secrets\n**Decision**: Use Windows Credential Manager for storing repository credentials.\n\n**Rationale**:\n- Native Windows security infrastructure\n- OS-level encryption and access control\n- No custom encryption key management needed\n- Integrates with Windows security policies\n\n**Trade-offs Accepted**:\n- Windows-specific (not portable to Linux/macOS)\n- Requires additional syscall complexity\n\n## Known Limitations\n\n### 1. Windows-Only Support\n**Limitation**: Currently only supports Windows platforms.\n\n**Impact**: Cannot be used on Linux or macOS development environments.\n\n**Future Solution**: Planned cross-platform support in v2.0.0 with unified codebase and platform-specific adapters.\n\n### 2. Single-User Model\n**Limitation**: Designed for single-user, local installation without multi-user or network share support.\n\n**Impact**: Each user on a system must install mvnenv-win separately.\n\n**Rationale**: Simplifies implementation and security model. Multi-user support adds complexity around permissions, shared state, and version conflicts.\n\n### 3. No IDE Plugin Integration\n**Limitation**: No direct integration with IDEs like IntelliJ IDEA or VS Code in v1.0.\n\n**Impact**: IDE Maven settings must be manually updated to point to mvnenv-managed Maven installations.\n\n**Future Solution**: IDE plugins planned for v1.2.0 to automatically detect and configure mvnenv versions.\n\n### 4. Manual Nexus Repository Configuration\n**Limitation**: Nexus repositories must be manually configured via commands or config file editing.\n\n**Impact**: Requires manual steps for enterprise setup rather than auto-discovery.\n\n**Future Solution**: Consider auto-discovery via Nexus API or import from Maven settings.xml in future versions.\n\n### 5. No Maven Wrapper Integration\n**Limitation**: Does not automatically detect or integrate with Maven Wrapper (mvnw) in v1.0.\n\n**Impact**: Projects using mvnw may have version conflicts or unexpected behavior.\n\n**Future Solution**: Planned for v2.0.0 with intelligent detection and preference for mvnw when present.\n",
  "fileStats": {
    "size": 16629,
    "lines": 362,
    "lastModified": "2025-10-11T15:41:46.355Z"
  },
  "comments": []
}