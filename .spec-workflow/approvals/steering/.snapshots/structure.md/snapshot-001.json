{
  "id": "snapshot_1760197745591_0xzn8yvpo",
  "approvalId": "approval_1760197745561_kg9l20vth",
  "approvalTitle": "Structure Steering Document (structure.md)",
  "version": 1,
  "timestamp": "2025-10-11T15:49:05.591Z",
  "trigger": "initial",
  "status": "pending",
  "content": "# Project Structure\n\n## Directory Organization\n\n```\nmvnenv-win/\n├── cmd/                          # Command-line executables (Go convention)\n│   ├── mvnenv/                   # Main CLI application\n│   │   └── main.go              # Entry point for mvnenv command\n│   └── shim/                     # Shim executable\n│       └── main.go              # Entry point for Maven shim\n│\n├── internal/                     # Private application packages (Go convention)\n│   ├── config/                   # Configuration management\n│   │   ├── config.go            # Configuration loading and validation\n│   │   ├── repository.go        # Repository configuration structures\n│   │   └── paths.go             # Path resolution and defaults\n│   ├── download/                 # Download manager\n│   │   ├── downloader.go        # HTTP download with progress tracking\n│   │   ├── checksum.go          # SHA-256 verification\n│   │   └── cache.go             # Download cache management\n│   ├── environment/              # Environment variable handling\n│   │   ├── path.go              # PATH manipulation (Windows-specific)\n│   │   ├── maven_home.go        # MAVEN_HOME management\n│   │   └── registry.go          # Windows registry operations\n│   ├── nexus/                    # Nexus repository client\n│   │   ├── client.go            # Nexus REST API client\n│   │   ├── auth.go              # Authentication handlers\n│   │   └── metadata.go          # Version metadata parsing\n│   ├── shim/                     # Shim generation and management\n│   │   ├── generator.go         # Shim executable generation\n│   │   ├── resolver.go          # Version resolution logic\n│   │   └── executor.go          # Maven command execution\n│   └── version/                  # Version management\n│       ├── manager.go           # Install/uninstall operations\n│       ├── resolver.go          # Version resolution (global/local/shell)\n│       ├── parser.go            # Version string parsing\n│       └── compare.go           # Version comparison logic\n│\n├── pkg/                          # Public reusable packages (Go convention)\n│   └── maven/                    # Maven-specific utilities\n│       ├── version.go           # Maven version structure and parsing\n│       ├── paths.go             # Maven installation paths\n│       └── metadata.go          # Maven metadata structures\n│\n├── test/                         # Test suites and test fixtures\n│   ├── fixtures/                # Test data and fixtures\n│   │   ├── maven-metadata.xml  # Sample Nexus metadata\n│   │   └── config.yaml         # Sample configuration files\n│   ├── integration/             # Integration tests\n│   │   ├── install_test.go     # Maven installation tests\n│   │   └── switch_test.go      # Version switching tests\n│   └── testutil/                # Test utilities and helpers\n│       ├── mock_nexus.go       # Mock Nexus server\n│       └── filesystem.go       # Temporary filesystem helpers\n│\n├── scripts/                      # Build and development scripts\n│   ├── install-mvnenv-win.ps1  # PowerShell installation script\n│   ├── build.ps1               # Build script for releases\n│   └── test.ps1                # Test runner script\n│\n├── docs/                         # Documentation\n│   ├── installation.md          # Installation guide\n│   ├── usage.md                # Command usage reference\n│   ├── configuration.md        # Configuration guide\n│   ├── nexus-integration.md    # Nexus setup guide\n│   └── troubleshooting.md      # Common issues and solutions\n│\n├── .github/                      # GitHub-specific files\n│   ├── workflows/               # GitHub Actions CI/CD\n│   │   ├── test.yml            # Test workflow\n│   │   ├── release.yml         # Release workflow\n│   │   └── lint.yml            # Linting workflow\n│   └── ISSUE_TEMPLATE/          # Issue templates\n│\n├── go.mod                        # Go module definition\n├── go.sum                        # Go module checksums\n├── Makefile                      # Build automation\n├── README.md                     # Project overview\n├── LICENSE                       # License file\n└── .gitignore                   # Git ignore patterns\n```\n\n## Installation Directory Structure\n\nThe application manages Maven versions in the user's home directory:\n\n```\n%USERPROFILE%\\.mvnenv/\n├── bin/                          # mvnenv executables\n│   └── mvnenv.exe               # Main executable\n│\n├── shims/                        # Shim executables (added to PATH)\n│   ├── mvn.exe                  # Maven shim (Windows executable)\n│   └── mvn.cmd                  # Maven shim (batch wrapper)\n│\n├── versions/                     # Installed Maven versions\n│   ├── 3.6.3/                   # Maven 3.6.3 installation\n│   │   ├── bin/\n│   │   ├── lib/\n│   │   └── conf/\n│   ├── 3.8.6/                   # Maven 3.8.6 installation\n│   │   └── ...\n│   └── 3.9.4/                   # Maven 3.9.4 installation\n│       └── ...\n│\n├── cache/                        # Downloaded distribution archives\n│   ├── apache-maven-3.6.3-bin.zip\n│   ├── apache-maven-3.8.6-bin.zip\n│   └── apache-maven-3.9.4-bin.zip\n│\n├── config/                       # Configuration files\n│   ├── config.yaml              # Main configuration\n│   └── repositories.yaml        # Repository configuration\n│\n└── logs/                         # Operation logs\n    └── mvnenv.log               # Application log file\n```\n\n## Naming Conventions\n\n### Files\n\n#### Go Source Files\n- **Main Packages**: `main.go` (standard Go convention for package main)\n- **Implementation Files**: `snake_case.go` (e.g., `maven_home.go`, `version_manager.go`)\n- **Test Files**: `[filename]_test.go` (Go standard, e.g., `downloader_test.go`)\n- **Windows-specific**: `[filename]_windows.go` (Go build tags, e.g., `registry_windows.go`)\n\n#### Configuration Files\n- **YAML Configuration**: `snake_case.yaml` (e.g., `config.yaml`, `repositories.yaml`)\n- **Documentation**: `kebab-case.md` (e.g., `nexus-integration.md`, `installation-guide.md`)\n\n#### Executables\n- **Windows Executables**: `kebab-case.exe` (e.g., `mvnenv.exe`)\n- **Batch Scripts**: `kebab-case.cmd` or `.bat` (e.g., `mvn.cmd`)\n- **PowerShell Scripts**: `PascalCase.ps1` or `kebab-case.ps1` (e.g., `install-mvnenv-win.ps1`)\n\n### Code\n\n#### Go Naming Conventions (following Go standards)\n- **Packages**: `lowercase` single-word when possible (e.g., `config`, `version`, `download`)\n- **Exported Types**: `PascalCase` (e.g., `VersionManager`, `NexusClient`, `ConfigLoader`)\n- **Unexported Types**: `camelCase` (e.g., `versionResolver`, `downloadCache`)\n- **Interfaces**: `PascalCase` with `-er` suffix (e.g., `Downloader`, `VersionResolver`, `Installer`)\n- **Functions/Methods**: `PascalCase` for exported, `camelCase` for unexported\n  - Exported: `InstallVersion()`, `GetCurrentVersion()`, `ResolveVersion()`\n  - Unexported: `parseMetadata()`, `validateChecksum()`, `extractArchive()`\n- **Constants**: `PascalCase` for exported, `camelCase` for unexported\n  - Exported: `DefaultTimeout`, `MaxRetries`, `ConfigFileName`\n  - Unexported: `defaultConfigPath`, `shimExecutableName`\n- **Variables**: `camelCase` for locals, `PascalCase` for exported package-level\n  - Local: `currentVersion`, `downloadPath`, `configFile`\n  - Exported: `DefaultConfig`, `SupportedVersions`\n\n#### Special Conventions\n- **Error Variables**: Start with `Err` (e.g., `ErrVersionNotFound`, `ErrInvalidConfig`)\n- **Error Returns**: Functions return `error` as last return value (Go convention)\n- **Context Parameters**: Context should be first parameter when used\n\n## Import Patterns\n\n### Import Order (following Go conventions and goimports)\n\n```go\npackage example\n\nimport (\n    // 1. Standard library imports (alphabetical)\n    \"context\"\n    \"fmt\"\n    \"os\"\n    \"path/filepath\"\n\n    // 2. Third-party imports (alphabetical)\n    \"github.com/go-resty/resty/v2\"\n    \"github.com/spf13/cobra\"\n    \"github.com/spf13/viper\"\n    \"gopkg.in/yaml.v3\"\n\n    // 3. Internal imports - project packages (alphabetical)\n    \"github.com/veenone/mvnenv-win/internal/config\"\n    \"github.com/veenone/mvnenv-win/internal/download\"\n    \"github.com/veenone/mvnenv-win/pkg/maven\"\n)\n```\n\n### Module Organization\n- **Module Path**: `github.com/veenone/mvnenv-win`\n- **Import Style**: Absolute imports from module root\n- **Internal Packages**: Can only be imported by code in parent tree (Go enforcement)\n- **Pkg Packages**: Can be imported by external projects (public API)\n\n## Code Structure Patterns\n\n### File Organization\n\n#### Standard Go File Structure\n```go\n// 1. Package declaration and documentation\n// Package version provides Maven version management functionality.\npackage version\n\n// 2. Imports (grouped as described above)\nimport (\n    \"fmt\"\n    \"os\"\n    // ...\n)\n\n// 3. Constants (exported first, then unexported)\nconst (\n    DefaultVersion = \"3.9.4\"\n    MaxVersions    = 100\n)\n\nconst (\n    versionFileName = \".maven-version\"\n    globalVersionKey = \"global_version\"\n)\n\n// 4. Package-level variables (if needed, minimize these)\nvar (\n    SupportedVersions = []string{\"3.6.3\", \"3.8.6\", \"3.9.4\"}\n)\n\n// 5. Type definitions (exported first, then unexported)\ntype Manager struct {\n    config     *config.Config\n    downloader Downloader\n    logger     Logger\n}\n\n// 6. Constructor functions (New* pattern)\nfunc NewManager(cfg *config.Config, opts ...Option) (*Manager, error) {\n    // Implementation\n}\n\n// 7. Public methods (grouped by receiver type)\nfunc (m *Manager) InstallVersion(ctx context.Context, version string) error {\n    // Implementation\n}\n\nfunc (m *Manager) UninstallVersion(version string) error {\n    // Implementation\n}\n\n// 8. Private methods (grouped by receiver type)\nfunc (m *Manager) resolveVersionPath(version string) string {\n    // Implementation\n}\n\n// 9. Package-level helper functions (exported first, then unexported)\nfunc ParseVersion(input string) (string, error) {\n    // Implementation\n}\n\nfunc validateVersionString(input string) bool {\n    // Implementation\n}\n```\n\n### Function/Method Organization\n\n```go\nfunc (m *Manager) InstallVersion(ctx context.Context, version string) error {\n    // 1. Input validation\n    if version == \"\" {\n        return ErrEmptyVersion\n    }\n    if !isValidVersion(version) {\n        return ErrInvalidVersion\n    }\n\n    // 2. Precondition checks\n    if m.IsInstalled(version) {\n        return ErrAlreadyInstalled\n    }\n\n    // 3. Core logic\n    downloadPath, err := m.downloadVersion(ctx, version)\n    if err != nil {\n        return fmt.Errorf(\"download failed: %w\", err)\n    }\n\n    if err := m.extractVersion(downloadPath, version); err != nil {\n        m.cleanup(downloadPath) // Cleanup on error\n        return fmt.Errorf(\"extraction failed: %w\", err)\n    }\n\n    // 4. Post-processing\n    if err := m.verifyInstallation(version); err != nil {\n        return fmt.Errorf(\"verification failed: %w\", err)\n    }\n\n    // 5. Success return\n    return nil\n}\n```\n\n## Code Organization Principles\n\n1. **Single Responsibility**: Each package has one clear purpose\n   - `internal/config`: Configuration only\n   - `internal/download`: Download operations only\n   - `internal/version`: Version management only\n\n2. **Modularity**: Packages are self-contained with clear interfaces\n   - Dependencies injected via constructors\n   - Interfaces defined in consuming packages (Go best practice)\n\n3. **Testability**: Code structured for easy testing\n   - Dependencies are interfaces\n   - File system operations abstracted for testing\n   - Network operations mockable\n\n4. **Consistency**: Follow established Go conventions\n   - Standard project layout (cmd, internal, pkg)\n   - Go standard library patterns\n   - Effective Go guidelines\n\n## Module Boundaries\n\n### Internal vs Public API\n\n**Internal Packages** (`internal/`):\n- Cannot be imported by external projects (Go enforced)\n- Implementation details of mvnenv-win\n- Can change without breaking compatibility\n- Examples: `internal/config`, `internal/download`, `internal/nexus`\n\n**Public Packages** (`pkg/`):\n- Can be imported by external projects\n- Stable API for reuse (e.g., plugins, extensions)\n- Breaking changes require major version bump\n- Examples: `pkg/maven` (Maven version utilities)\n\n### Dependency Direction\n\n```\n┌──────────────────────────────────────┐\n│  cmd/mvnenv (CLI Entry Point)        │\n└──────────────┬───────────────────────┘\n               │ depends on\n               ▼\n┌──────────────────────────────────────┐\n│  internal/* (Business Logic)         │\n│  - config, download, version, etc.   │\n└──────────────┬───────────────────────┘\n               │ depends on\n               ▼\n┌──────────────────────────────────────┐\n│  pkg/maven (Public Utilities)        │\n└──────────────────────────────────────┘\n\nRule: Dependencies flow downward only\n- cmd depends on internal (but not vice versa)\n- internal can use pkg (but pkg cannot use internal)\n- internal packages can depend on each other (minimize)\n```\n\n### Platform-Specific Code\n\n**Windows-Specific Implementation**:\n- Use Go build tags: `//go:build windows`\n- Filename convention: `*_windows.go`\n- Examples:\n  - `internal/environment/registry_windows.go` (Windows registry)\n  - `internal/environment/path_windows.go` (Windows PATH manipulation)\n\n**Future Cross-Platform Support**:\n- Linux/macOS implementations: `*_unix.go` or `*_linux.go`, `*_darwin.go`\n- Shared interfaces in non-suffixed files\n- Example: `environment.go` defines interface, `environment_windows.go` implements\n\n### Stable vs Experimental\n\n**Stable Components** (v1.0.0):\n- Core version management: `internal/version`\n- Configuration: `internal/config`\n- Shim system: `internal/shim`\n\n**Future Experimental** (post-v1.0.0):\n- IDE plugins: Would go in `internal/plugins` or separate repo\n- Web dashboard: Would go in `internal/web` or separate repo\n- Team collaboration features: TBD architecture\n\n## Code Size Guidelines\n\n### File Size\n- **Target**: <500 lines per file (excluding generated code)\n- **Maximum**: 1000 lines (consider splitting if exceeded)\n- **Rationale**: Maintainability and ease of navigation\n\n### Function/Method Size\n- **Target**: <50 lines per function\n- **Maximum**: 100 lines (consider refactoring if exceeded)\n- **Extract helpers** for logic blocks that can be named meaningfully\n\n### Function Complexity\n- **Cyclomatic Complexity**: Aim for <10 per function\n- **Nesting Depth**: Maximum 3-4 levels (use early returns)\n- **Parameters**: Maximum 5 parameters (use config structs for more)\n\n### Example of Refactoring Deep Nesting\n\n**Before** (deep nesting):\n```go\nfunc processVersion(version string) error {\n    if version != \"\" {\n        if isValid(version) {\n            if !isInstalled(version) {\n                if err := download(version); err == nil {\n                    if err := install(version); err == nil {\n                        return nil\n                    }\n                }\n            }\n        }\n    }\n    return errors.New(\"failed\")\n}\n```\n\n**After** (early returns):\n```go\nfunc processVersion(version string) error {\n    if version == \"\" {\n        return ErrEmptyVersion\n    }\n    if !isValid(version) {\n        return ErrInvalidVersion\n    }\n    if isInstalled(version) {\n        return ErrAlreadyInstalled\n    }\n\n    if err := download(version); err != nil {\n        return fmt.Errorf(\"download failed: %w\", err)\n    }\n\n    if err := install(version); err != nil {\n        return fmt.Errorf(\"install failed: %w\", err)\n    }\n\n    return nil\n}\n```\n\n## Documentation Standards\n\n### Package Documentation\n- Every package must have package-level documentation\n- First sentence should be concise package description\n- Example:\n  ```go\n  // Package version provides Maven version installation, management,\n  // and resolution capabilities for mvnenv-win.\n  package version\n  ```\n\n### Exported API Documentation\n- All exported types, functions, constants must have godoc comments\n- Start with the name of the item being documented\n- Examples:\n  ```go\n  // Manager handles Maven version installation and management.\n  type Manager struct { ... }\n\n  // InstallVersion downloads and installs the specified Maven version.\n  // It returns an error if the version is invalid or already installed.\n  func (m *Manager) InstallVersion(ctx context.Context, version string) error { ... }\n\n  // DefaultTimeout is the default timeout for download operations.\n  const DefaultTimeout = 300 * time.Second\n  ```\n\n### Complex Logic Comments\n- Use inline comments for non-obvious logic\n- Explain \"why\" not \"what\" (code shows what)\n- Example:\n  ```go\n  // Use a temporary directory for extraction to ensure atomic installation.\n  // If extraction fails, we can simply delete the temp directory without\n  // corrupting the versions directory.\n  tempDir := filepath.Join(m.config.CacheDir, \"tmp-\"+version)\n  ```\n\n### README Files\n- Root `README.md`: Project overview, installation, quick start\n- Major modules can have `README.md` if needed\n- Keep READMEs concise, link to detailed docs\n\n### Examples and Tutorials\n- `docs/` directory for comprehensive guides\n- Code examples in `examples/` directory (if creating public API)\n- Tutorials in `docs/tutorials/` for common workflows\n\n## Error Handling Patterns\n\n### Error Definition\n```go\n// Package-level errors\nvar (\n    ErrVersionNotFound   = errors.New(\"version not found\")\n    ErrInvalidConfig     = errors.New(\"invalid configuration\")\n    ErrAlreadyInstalled  = errors.New(\"version already installed\")\n)\n```\n\n### Error Wrapping\n```go\n// Always wrap errors with context using %w\nif err := downloadFile(url, dest); err != nil {\n    return fmt.Errorf(\"failed to download from %s: %w\", url, err)\n}\n```\n\n### Error Checking\n```go\n// Check errors immediately after operation\nfile, err := os.Open(path)\nif err != nil {\n    return fmt.Errorf(\"failed to open file: %w\", err)\n}\ndefer file.Close()\n```\n",
  "fileStats": {
    "size": 19041,
    "lines": 528,
    "lastModified": "2025-10-11T15:48:57.987Z"
  },
  "comments": []
}