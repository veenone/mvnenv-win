{
  "id": "snapshot_1760276149151_yw4fnp8rd",
  "approvalId": "approval_1760276149024_ptgczy1d9",
  "approvalTitle": "Shim System Implementation - Tasks Document",
  "version": 1,
  "timestamp": "2025-10-12T13:35:49.151Z",
  "trigger": "initial",
  "status": "pending",
  "content": "# Tasks Document\n\nThis document lists all implementation tasks for the Shim System Implementation feature. Each task includes detailed prompts for AI-assisted development.\n\n## Task List\n\n### Foundation Tasks\n\n#### Task 1: Create Shim Executable Entry Point\n**Status:** [ ] Not Started | [ ] In Progress | [ ] Completed\n\n**Files to Create:**\n- `cmd/shim/main.go`\n\n**Description:** Create the main entry point for the shim executable that detects the command name from the executable filename and routes to the ShimExecutor.\n\n**Dependencies:** None\n\n**Estimated Effort:** 2 hours\n\n**_Prompt:**\n```\nYou are implementing the shim executable entry point for mvnenv-win.\n\n**Role:** Senior Go developer with expertise in command-line tools and process execution.\n\n**Task:** Create cmd/shim/main.go with:\n\n1. main() function:\n   - Detect command name from os.Executable() path\n   - Extract base filename and remove .exe extension\n   - Create VersionResolver from core-version-management\n   - Create ShimExecutor with resolver\n   - Call executor.Execute(command, os.Args[1:])\n   - Exit with returned exit code\n\n2. detectCommand() string:\n   - Get executable path with os.Executable()\n   - Extract basename with filepath.Base()\n   - Remove .exe extension if present with strings.TrimSuffix()\n   - Return command name (e.g., \"mvn\", \"mvnDebug\")\n   - Default to \"mvn\" on error\n\n3. Error handling:\n   - Print errors to stderr\n   - Exit with code 1 on resolution errors\n   - Exit with Maven's code on execution errors\n\n4. Minimal imports:\n   - Standard library only (fmt, os, path/filepath, strings)\n   - Internal packages: internal/shim, internal/version\n\n**Restrictions:**\n- No external dependencies\n- Keep main.go minimal (<50 lines)\n- All logic in internal/shim package\n- Never buffer or modify Maven output\n\n**Success Criteria:**\n- Executable detects command from filename\n- Errors print to stderr\n- Exit codes preserved from Maven\n- Clean, readable code\n\n**Instructions:**\n- When starting this task, mark it as \"In Progress\": [x] In Progress\n- When completed, mark it as \"Completed\": [x] Completed\n```\n\n---\n\n#### Task 2: Create ShimExecutor for Command Execution\n**Status:** [ ] Not Started | [ ] In Progress | [ ] Completed\n\n**Files to Create:**\n- `internal/shim/executor.go`\n\n**Description:** Implement ShimExecutor that handles version resolution, Maven path construction, process execution, and I/O forwarding.\n\n**Dependencies:** Task 1, core-version-management spec completed\n\n**Estimated Effort:** 4 hours\n\n**_Prompt:**\n```\nYou are implementing ShimExecutor for mvnenv-win's shim system.\n\n**Role:** Senior Go developer with expertise in process management and I/O handling.\n\n**Task:** Create internal/shim/executor.go with:\n\n1. ShimExecutor struct:\n   - resolver *version.VersionResolver\n   - debug bool (from MVNENV_DEBUG env var)\n\n2. NewShimExecutor(resolver *version.VersionResolver) *ShimExecutor:\n   - Check os.Getenv(\"MVNENV_DEBUG\") == \"1\"\n   - Return executor with resolver and debug flag\n\n3. Execute(command string, args []string) (int, error):\n   - Record start time for performance tracking\n   - Call resolver.ResolveVersion()\n   - If error: return formatResolutionError()\n   - Construct Maven path: filepath.Join(resolved.Path, \"bin\", command+\".cmd\")\n   - Verify Maven binary exists with os.Stat()\n   - If debug: log resolution details to stderr\n   - Call executeMaven()\n   - If debug: log total execution time\n   - Return exit code\n\n4. executeMaven(mavenPath string, args []string, resolved *version.ResolvedVersion) (int, error):\n   - Create context.WithCancel() for signal handling\n   - Create exec.CommandContext(ctx, mavenPath, args...)\n   - Set MAVEN_HOME env var: append to os.Environ()\n   - Forward I/O: cmd.Stdin/Stdout/Stderr = os.Stdin/Stdout/Stderr\n   - Set working directory: cmd.Dir, _ = os.Getwd()\n   - Setup signal handler for Ctrl+C: signal.Notify() -> cancel()\n   - Start process: cmd.Start()\n   - Wait for completion: cmd.Wait()\n   - Extract exit code from *exec.ExitError\n   - Return exit code (0 on success)\n\n5. formatResolutionError(err error) error:\n   - Check error type with version.IsVersionNotInstalledError()\n   - Format user-friendly message with installation suggestion\n   - Check version.IsNoVersionSetError()\n   - Format message with global version suggestion\n   - Default: wrap error with context\n\n6. logDebug(...):\n   - Output to stderr with [mvnenv] prefix\n   - Include: command, args, version, source, path, MAVEN_HOME, timing\n\n**Restrictions:**\n- Use os/exec for process execution\n- Use context for cancellation\n- No buffering of I/O streams\n- Direct forwarding: cmd.Stdin = os.Stdin\n- Handle signals properly (Ctrl+C)\n- Extract exact exit code from Maven\n\n**Success Criteria:**\n- Version resolution integrated correctly\n- Process execution with I/O forwarding works\n- Exit codes preserved exactly\n- Signal handling (Ctrl+C) works\n- Debug mode provides useful information\n- Performance: <50ms overhead\n\n**Instructions:**\n- When starting this task, mark it as \"In Progress\": [x] In Progress\n- When completed, mark it as \"Completed\": [x] Completed\n```\n\n---\n\n#### Task 3: Create ShimGenerator for Shim File Generation\n**Status:** [ ] Not Started | [ ] In Progress | [ ] Completed\n\n**Files to Create:**\n- `internal/shim/generator.go`\n\n**Description:** Implement ShimGenerator that creates shim executables by copying shim.exe and generates .cmd batch files.\n\n**Dependencies:** None\n\n**Estimated Effort:** 4 hours\n\n**_Prompt:**\n```\nYou are implementing ShimGenerator for mvnenv-win.\n\n**Role:** Senior Go developer with file system operations expertise.\n\n**Task:** Create internal/shim/generator.go with:\n\n1. ShimGenerator struct:\n   - shimsDir string (%USERPROFILE%\\.mvnenv\\shims)\n   - shimBinary string (path to shim.exe)\n   - versionsDir string (%USERPROFILE%\\.mvnenv\\versions)\n\n2. NewShimGenerator(mvnenvRoot string) *ShimGenerator:\n   - Initialize paths using filepath.Join()\n   - shimsDir: filepath.Join(mvnenvRoot, \"shims\")\n   - shimBinary: filepath.Join(mvnenvRoot, \"bin\", \"shim.exe\")\n   - versionsDir: filepath.Join(mvnenvRoot, \"versions\")\n\n3. GenerateShims() ([]string, error):\n   - Create shims directory: os.MkdirAll(shimsDir, 0755)\n   - Define core commands: []string{\"mvn\", \"mvnDebug\"}\n   - Call discoverAdditionalCommands() for mvnyjp, etc.\n   - Append additional commands to core commands\n   - For each command:\n     * Call generateShimFile(cmd, \".exe\")\n     * Call generateBatchShim(cmd)\n     * Collect generated paths\n   - Return list of generated paths\n\n4. generateShimFile(command string, ext string) (string, error):\n   - Construct destination: filepath.Join(shimsDir, command+ext)\n   - Copy shim.exe to destination with copyFile()\n   - Verify executable with verifyExecutable()\n   - Return destination path\n\n5. generateBatchShim(command string) (string, error):\n   - Construct destination: filepath.Join(shimsDir, command+\".cmd\")\n   - Create batch script:\n     @echo off\n     \"%~dp0{command}.exe\" %*\n     exit /b %ERRORLEVEL%\n   - Write with os.WriteFile(dest, []byte(script), 0755)\n   - Return destination path\n\n6. discoverAdditionalCommands() ([]string, error):\n   - Read versionsDir with os.ReadDir()\n   - For each version directory:\n     * Read bin/ subdirectory\n     * Look for .cmd files\n     * Exclude mvn.cmd and mvnDebug.cmd\n     * Collect unique command names in set\n   - Return list of additional commands\n\n7. copyFile(src, dst string) error:\n   - Open source file\n   - Create temp destination: dst+\".tmp\"\n   - io.Copy() from source to temp\n   - Close both files\n   - Atomic rename: os.Rename(tmp, dst)\n   - Clean up temp file on error\n\n8. verifyExecutable(path string) error:\n   - os.Stat() to check file exists\n   - Verify not a directory\n   - Check .exe or .cmd extension\n\n**Restrictions:**\n- Use atomic file operations (temp + rename)\n- Handle missing versionsDir gracefully (no versions yet)\n- Log warnings for non-critical errors\n- Create directories automatically\n- Windows-specific: .exe and .cmd files\n\n**Success Criteria:**\n- Shims generated for mvn and mvnDebug\n- Additional commands discovered from installed versions\n- Atomic generation (no partial files)\n- Both .exe and .cmd variants created\n- Existing shims overwritten cleanly\n\n**Instructions:**\n- When starting this task, mark it as \"In Progress\": [x] In Progress\n- When completed, mark it as \"Completed\": [x] Completed\n```\n\n---\n\n#### Task 4: Create PathManager for Windows PATH Management\n**Status:** [ ] Not Started | [ ] In Progress | [ ] Completed\n\n**Files to Create:**\n- `internal/shim/path_windows.go`\n\n**Description:** Implement Windows registry-based PATH management for adding/removing shims directory from user PATH.\n\n**Dependencies:** None\n\n**Estimated Effort:** 3 hours\n\n**_Prompt:**\n```\nYou are implementing Windows PATH management for mvnenv-win.\n\n**Role:** Senior Go developer with Windows platform expertise.\n\n**Task:** Create internal/shim/path_windows.go with:\n\n1. Build tag: //go:build windows\n\n2. PathManager struct:\n   - shimsDir string\n\n3. NewPathManager(mvnenvRoot string) *PathManager:\n   - Initialize shimsDir: filepath.Join(mvnenvRoot, \"shims\")\n\n4. AddShimsDirToPath() (bool, error):\n   - Open registry key: registry.OpenKey(registry.CURRENT_USER, `Environment`, QUERY_VALUE|SET_VALUE)\n   - Read current PATH: key.GetStringValue(\"Path\")\n   - Check if shimsDir already in PATH with isInPath() (case-insensitive)\n   - If already present: return false, nil\n   - Prepend shimsDir: newPath = shimsDir + \";\" + currentPath\n   - Write new PATH: key.SetStringValue(\"Path\", newPath)\n   - Broadcast environment change: broadcastEnvironmentChange()\n   - Return true, nil\n\n5. RemoveShimsDirFromPath() (bool, error):\n   - Open registry key\n   - Read current PATH\n   - Remove shimsDir with removeFromPath()\n   - If not present: return false, nil\n   - Write new PATH\n   - Broadcast environment change\n   - Return true, nil\n\n6. isInPath(path string, dir string) bool:\n   - Split PATH by semicolon: strings.Split(path, \";\")\n   - Convert dir to lowercase for comparison\n   - For each path element:\n     * Trim whitespace\n     * Compare lowercase\n     * Return true if match\n   - Return false\n\n7. removeFromPath(path string, dir string) string:\n   - Split PATH by semicolon\n   - Filter out directory (case-insensitive)\n   - Join remaining paths with semicolon\n\n8. broadcastEnvironmentChange():\n   - Use syscall to SendMessageTimeoutW\n   - Broadcast WM_SETTINGCHANGE message\n   - Makes PATH change visible to new processes\n\n**Restrictions:**\n- Windows-only code (build tag)\n- Use golang.org/x/sys/windows/registry\n- Case-insensitive PATH comparison\n- Prepend to PATH (highest priority)\n- User-level registry only (CURRENT_USER)\n- Handle missing PATH value gracefully\n\n**Success Criteria:**\n- Shims directory added to user PATH\n- PATH change visible in new terminal sessions\n- Duplicate additions prevented\n- Case-insensitive comparison works\n- Removal works correctly\n\n**Instructions:**\n- When starting this task, mark it as \"In Progress\": [x] In Progress\n- When completed, mark it as \"Completed\": [x] Completed\n```\n\n---\n\n### Integration Tasks\n\n#### Task 5: Integrate ShimGenerator with Version Installer\n**Status:** [ ] Not Started | [ ] In Progress | [ ] Completed\n\n**Files to Modify:**\n- `internal/version/installer.go`\n\n**Description:** Add automatic shim regeneration after Maven version installation.\n\n**Dependencies:** Tasks 3, core-version-management spec completed\n\n**Estimated Effort:** 1 hour\n\n**_Prompt:**\n```\nYou are integrating automatic shim regeneration into mvnenv-win's version installer.\n\n**Role:** Senior Go developer with integration expertise.\n\n**Task:** Update internal/version/installer.go:\n\n1. Add field to VersionInstaller struct:\n   - shimGenerator *shim.ShimGenerator\n\n2. Update NewVersionInstaller():\n   - Create ShimGenerator: shim.NewShimGenerator(mvnenvRoot)\n   - Assign to installer.shimGenerator\n\n3. Update InstallVersion() method:\n   - After successful installation (extraction and verification)\n   - Call installer.regenerateShims()\n   - If regeneration fails: log warning, don't fail installation\n\n4. Add regenerateShims() method:\n   - Call shimGenerator.GenerateShims()\n   - Log success: \"Shims regenerated (%d files)\"\n   - Return error if generation fails\n\n5. Similarly update UninstallVersion() method:\n   - After successful uninstallation\n   - Call installer.regenerateShims()\n   - Log warning on failure\n\n**Restrictions:**\n- Don't fail installation if shim regeneration fails\n- Log warnings for shim errors\n- Provide suggestion to run 'mvnenv rehash' manually\n\n**Success Criteria:**\n- Shims automatically regenerated after install\n- Shims automatically regenerated after uninstall\n- Installation doesn't fail if regeneration fails\n- Clear warning messages\n\n**Instructions:**\n- When starting this task, mark it as \"In Progress\": [x] In Progress\n- When completed, mark it as \"Completed\": [x] Completed\n```\n\n---\n\n#### Task 6: Implement rehash CLI Command\n**Status:** [ ] Not Started | [ ] In Progress | [ ] Completed\n\n**Files to Create:**\n- `cmd/mvnenv/cmd/rehash.go`\n\n**Description:** Implement the `mvnenv rehash` command that manually triggers shim regeneration.\n\n**Dependencies:** Task 3, cli-commands spec completed\n\n**Estimated Effort:** 1 hour\n\n**_Prompt:**\n```\nYou are implementing the rehash command for mvnenv-win.\n\n**Role:** Senior Go developer with Cobra CLI expertise.\n\n**Task:** Create cmd/mvnenv/cmd/rehash.go:\n\n1. Create Cobra command:\n   - Use: \"rehash\"\n   - Short: \"Regenerate shim executables\"\n   - Long: Detailed description of what rehash does and when to use it\n\n2. runRehash(cmd *cobra.Command, args []string) error:\n   - Get mvnenvRoot from config or environment\n   - Create ShimGenerator: shim.NewShimGenerator(mvnenvRoot)\n   - Call generator.GenerateShims()\n   - If error: return formatted error\n   - Print success message: \"Shims regenerated successfully (%d files)\"\n   - List generated shim names (without paths)\n\n3. init() function:\n   - Register command: rootCmd.AddCommand(rehashCmd)\n\n4. Output format (plain text, no emojis):\n   Regenerating shims...\n   Shims regenerated successfully (6 files)\n   - mvn\n   - mvnDebug\n   - mvnyjp\n\n**Restrictions:**\n- Follow pyenv-win output style (plain text)\n- No emojis or decorative elements\n- Clear error messages\n- Show list of regenerated commands\n\n**Success Criteria:**\n- Command runs without errors\n- Shims regenerated correctly\n- Output shows what was generated\n- Error messages clear and actionable\n\n**Instructions:**\n- When starting this task, mark it as \"In Progress\": [x] In Progress\n- When completed, mark it as \"Completed\": [x] Completed\n```\n\n---\n\n### Testing Tasks\n\n#### Task 7: Unit Tests for ShimExecutor\n**Status:** [ ] Not Started | [ ] In Progress | [ ] Completed\n\n**Files to Create:**\n- `internal/shim/executor_test.go`\n\n**Description:** Comprehensive unit tests for ShimExecutor including resolution, execution, and error handling.\n\n**Dependencies:** Task 2\n\n**Estimated Effort:** 3 hours\n\n**_Prompt:**\n```\nYou are writing unit tests for ShimExecutor in mvnenv-win.\n\n**Role:** Senior Go developer with testing expertise.\n\n**Task:** Create internal/shim/executor_test.go:\n\n1. TestShimExecutor_Execute_Success:\n   - Mock VersionResolver to return valid version\n   - Create fake Maven binary (batch script that echoes args)\n   - Call executor.Execute()\n   - Verify: exit code 0\n   - Verify: no error\n\n2. TestShimExecutor_Execute_VersionNotInstalled:\n   - Mock VersionResolver to return ErrVersionNotInstalled\n   - Call executor.Execute()\n   - Verify: exit code 1\n   - Verify: error message suggests installation command\n\n3. TestShimExecutor_Execute_NoVersionSet:\n   - Mock VersionResolver to return ErrNoVersionSet\n   - Call executor.Execute()\n   - Verify: exit code 1\n   - Verify: error message suggests setting global version\n\n4. TestShimExecutor_Execute_MavenBinaryNotFound:\n   - Mock VersionResolver to return valid but non-existent path\n   - Call executor.Execute()\n   - Verify: exit code 1\n   - Verify: error mentions binary not found\n\n5. TestShimExecutor_Execute_ExitCodePreserved:\n   - Mock Maven binary that exits with code 42\n   - Call executor.Execute()\n   - Verify: exit code 42 returned\n\n6. TestShimExecutor_Execute_ArgumentPassthrough:\n   - Mock Maven binary that echoes arguments\n   - Call executor.Execute(\"mvn\", []string{\"clean\", \"install\"})\n   - Capture output\n   - Verify: arguments passed unchanged\n\n7. TestShimExecutor_Execute_DebugMode:\n   - Set MVNENV_DEBUG=1\n   - Capture stderr\n   - Call executor.Execute()\n   - Verify: debug information logged to stderr\n   - Verify: includes version, source, path, timing\n\n**Restrictions:**\n- Use testify/assert for assertions\n- Mock VersionResolver with testify/mock\n- Create temporary directories for fake Maven installations\n- Clean up test files after each test\n- Test both success and error paths\n\n**Success Criteria:**\n- All tests pass\n- Code coverage >90%\n- Tests run quickly (<1s total)\n- No test pollution (cleanup works)\n\n**Instructions:**\n- When starting this task, mark it as \"In Progress\": [x] In Progress\n- When completed, mark it as \"Completed\": [x] Completed\n```\n\n---\n\n#### Task 8: Unit Tests for ShimGenerator\n**Status:** [ ] Not Started | [ ] In Progress | [ ] Completed\n\n**Files to Create:**\n- `internal/shim/generator_test.go`\n\n**Description:** Unit tests for ShimGenerator covering shim creation, discovery, and atomic operations.\n\n**Dependencies:** Task 3\n\n**Estimated Effort:** 3 hours\n\n**_Prompt:**\n```\nYou are writing unit tests for ShimGenerator in mvnenv-win.\n\n**Role:** Senior Go developer with file system testing expertise.\n\n**Task:** Create internal/shim/generator_test.go:\n\n1. TestShimGenerator_GenerateShims_CoreCommands:\n   - Create temp mvnenv directory structure\n   - Create fake shim.exe binary\n   - Call GenerateShims()\n   - Verify: mvn.exe created\n   - Verify: mvn.cmd created\n   - Verify: mvnDebug.exe created\n   - Verify: mvnDebug.cmd created\n\n2. TestShimGenerator_GenerateShims_AdditionalCommands:\n   - Create temp versions directory with mvnyjp.cmd\n   - Call GenerateShims()\n   - Verify: mvnyjp.exe created\n   - Verify: mvnyjp.cmd created\n\n3. TestShimGenerator_GenerateShims_OverwriteExisting:\n   - Generate shims\n   - Modify one shim file\n   - Generate shims again\n   - Verify: modified file overwritten\n\n4. TestShimGenerator_GenerateShims_AtomicOperation:\n   - Intercept file creation to simulate failure mid-generation\n   - Call GenerateShims()\n   - Verify: no partial .tmp files left\n\n5. TestShimGenerator_DiscoverAdditionalCommands:\n   - Create versions directory with multiple versions\n   - Add custom commands to some versions\n   - Call discoverAdditionalCommands()\n   - Verify: unique commands discovered\n   - Verify: core commands (mvn, mvnDebug) not included\n\n6. TestShimGenerator_BatchShimContent:\n   - Generate batch shim\n   - Read content\n   - Verify: calls .exe with %*\n   - Verify: exits with %ERRORLEVEL%\n\n7. TestShimGenerator_NoVersionsInstalled:\n   - Create empty versions directory\n   - Call GenerateShims()\n   - Verify: core shims still generated\n   - Verify: no error\n\n**Restrictions:**\n- Use temporary directories (t.TempDir())\n- Create fake shim.exe for testing\n- Verify file permissions where applicable\n- Test Windows-specific behavior (.exe, .cmd)\n- Clean up automatically with t.TempDir()\n\n**Success Criteria:**\n- All tests pass\n- Code coverage >90%\n- Both .exe and .cmd generation tested\n- Atomic operations verified\n- Discovery logic tested\n\n**Instructions:**\n- When starting this task, mark it as \"In Progress\": [x] In Progress\n- When completed, mark it as \"Completed\": [x] Completed\n```\n\n---\n\n#### Task 9: Unit Tests for PathManager\n**Status:** [ ] Not Started | [ ] In Progress | [ ] Completed\n\n**Files to Create:**\n- `internal/shim/path_windows_test.go`\n\n**Description:** Unit tests for Windows PATH management including registry operations.\n\n**Dependencies:** Task 4\n\n**Estimated Effort:** 2 hours\n\n**_Prompt:**\n```\nYou are writing unit tests for PathManager in mvnenv-win.\n\n**Role:** Senior Go developer with Windows platform testing expertise.\n\n**Task:** Create internal/shim/path_windows_test.go:\n\n1. Build tag: //go:build windows\n\n2. TestPathManager_AddShimsDirToPath:\n   - Create PathManager with temp directory\n   - Mock or use test registry key (careful!)\n   - Call AddShimsDirToPath()\n   - Verify: returns true (modified)\n   - Verify: shimsDir in PATH\n   - Verify: shimsDir at beginning of PATH\n\n3. TestPathManager_AddShimsDirToPath_AlreadyPresent:\n   - Add shimsDir to PATH manually\n   - Call AddShimsDirToPath()\n   - Verify: returns false (not modified)\n   - Verify: no duplicate entries\n\n4. TestPathManager_IsInPath_CaseInsensitive:\n   - Create PATH with uppercase directory\n   - Check for lowercase directory\n   - Verify: returns true (case-insensitive match)\n\n5. TestPathManager_RemoveShimsDirFromPath:\n   - Add shimsDir to PATH\n   - Call RemoveShimsDirFromPath()\n   - Verify: returns true (modified)\n   - Verify: shimsDir not in PATH\n\n6. TestPathManager_RemoveShimsDirFromPath_NotPresent:\n   - Ensure shimsDir not in PATH\n   - Call RemoveShimsDirFromPath()\n   - Verify: returns false (not modified)\n\n7. TestPathManager_RemoveFromPath:\n   - Create PATH with multiple entries\n   - Remove one entry\n   - Verify: entry removed\n   - Verify: other entries preserved\n   - Verify: order maintained\n\n**Restrictions:**\n- Windows-only tests (build tag)\n- Be careful with registry modifications\n- Use test registry keys if possible\n- Restore original PATH after tests\n- May require admin setup for CI\n\n**Success Criteria:**\n- All tests pass on Windows\n- Case-insensitive comparison tested\n- No pollution of actual PATH\n- Cleanup restores original state\n\n**Instructions:**\n- When starting this task, mark it as \"In Progress\": [x] In Progress\n- When completed, mark it as \"Completed\": [x] Completed\n```\n\n---\n\n#### Task 10: Integration Tests for Shim System\n**Status:** [ ] Not Started | [ ] In Progress | [ ] Completed\n\n**Files to Create:**\n- `test/integration/shim_integration_test.go`\n\n**Description:** End-to-end integration tests for the complete shim workflow.\n\n**Dependencies:** Tasks 1-6\n\n**Estimated Effort:** 4 hours\n\n**_Prompt:**\n```\nYou are writing integration tests for the shim system in mvnenv-win.\n\n**Role:** Senior Go developer with integration testing expertise.\n\n**Task:** Create test/integration/shim_integration_test.go:\n\n1. TestIntegration_ShimGeneration:\n   - Setup: create mvnenv directory structure\n   - Install a Maven version\n   - Generate shims\n   - Verify: all expected shim files exist\n   - Verify: shim executables are valid\n\n2. TestIntegration_ShimExecution_GlobalVersion:\n   - Setup: install Maven version, set global\n   - Generate shims\n   - Execute mvn shim with test arguments\n   - Verify: correct Maven version executed\n   - Verify: arguments passed through\n   - Verify: exit code 0\n\n3. TestIntegration_ShimExecution_LocalVersion:\n   - Setup: install two Maven versions\n   - Set global version 1\n   - Create .maven-version file with version 2\n   - Execute mvn shim\n   - Verify: version 2 used (local overrides global)\n\n4. TestIntegration_ShimExecution_ShellVersion:\n   - Setup: install two versions, set global\n   - Set MVNENV_MAVEN_VERSION environment variable\n   - Execute mvn shim\n   - Verify: shell version used (highest priority)\n\n5. TestIntegration_ShimExecution_VersionNotInstalled:\n   - Setup: set global to non-installed version\n   - Execute mvn shim\n   - Verify: error message mentions version not installed\n   - Verify: suggests installation command\n   - Verify: exit code 1\n\n6. TestIntegration_ShimExecution_NoVersionSet:\n   - Setup: no versions configured\n   - Execute mvn shim\n   - Verify: error message about no version set\n   - Verify: suggests setting global version\n   - Verify: exit code 1\n\n7. TestIntegration_ShimIOForwarding:\n   - Create test Maven script that reads stdin, writes stdout/stderr\n   - Execute shim with piped input\n   - Capture stdout and stderr\n   - Verify: stdin forwarded correctly\n   - Verify: stdout captured\n   - Verify: stderr captured\n\n8. TestIntegration_ShimExitCode:\n   - Create test Maven script that exits with specific code\n   - Execute shim\n   - Verify: exact exit code preserved (42 -> 42)\n\n9. TestIntegration_RehashCommand:\n   - Install Maven version\n   - Delete shims manually\n   - Run 'mvnenv rehash'\n   - Verify: shims regenerated\n   - Verify: success message displayed\n\n10. TestIntegration_AutomaticRehash:\n    - Install first Maven version\n    - Verify: shims created automatically\n    - Install second Maven version\n    - Verify: shims regenerated automatically\n\n11. TestIntegration_DebugMode:\n    - Set MVNENV_DEBUG=1\n    - Execute mvn shim\n    - Capture stderr\n    - Verify: debug information present\n    - Verify: includes version, source, path, timing\n\n**Restrictions:**\n- Use temporary directories for test installations\n- Create minimal test Maven installations\n- Clean up test data after each test\n- Tests should be runnable offline\n- Skip tests if required setup not available\n\n**Success Criteria:**\n- Full workflow tested end-to-end\n- All version resolution sources tested (shell/local/global)\n- I/O forwarding verified\n- Exit code preservation verified\n- Error cases tested\n- Debug mode tested\n\n**Instructions:**\n- When starting this task, mark it as \"In Progress\": [x] In Progress\n- When completed, mark it as \"Completed\": [x] Completed\n```\n\n---\n\n#### Task 11: Performance Benchmarks\n**Status:** [ ] Not Started | [ ] In Progress | [ ] Completed\n\n**Files to Create:**\n- `test/benchmarks/shim_bench_test.go`\n\n**Description:** Performance benchmarks to verify <50ms overhead requirement.\n\n**Dependencies:** Tasks 1-2\n\n**Estimated Effort:** 2 hours\n\n**_Prompt:**\n```\nYou are writing performance benchmarks for mvnenv-win's shim system.\n\n**Role:** Senior Go developer with performance testing expertise.\n\n**Task:** Create test/benchmarks/shim_bench_test.go:\n\n1. BenchmarkShimOverhead:\n   - Measure total time from shim start to Maven process start\n   - Use no-op Maven script for consistent timing\n   - Benchmark excludes Maven execution time\n   - Assert: overhead <50ms (fail if exceeded)\n\n2. BenchmarkVersionResolution:\n   - Measure time to resolve version only\n   - Test with .maven-version file present\n   - Assert: resolution <25ms\n\n3. BenchmarkProcessSpawn:\n   - Measure time from Maven path construction to process start\n   - Use minimal Maven script\n   - Assert: spawn <25ms\n\n4. BenchmarkShimConcurrent:\n   - Launch multiple shim executions concurrently\n   - Measure per-shim overhead under load\n   - Verify: no significant slowdown under concurrency\n\n5. BenchmarkShimGeneration:\n   - Measure time to generate all shims\n   - Include both .exe and .cmd creation\n   - Typical expected: <100ms for core commands\n\n**Benchmark Output Format:**\n```\nBenchmarkShimOverhead-8           50    42.3 ms/op\nBenchmarkVersionResolution-8     100    12.5 ms/op\nBenchmarkProcessSpawn-8          100    18.7 ms/op\n```\n\n**Restrictions:**\n- Use testing.B for benchmarks\n- Use b.ResetTimer() after setup\n- Create realistic test environment\n- Fail benchmark if performance target exceeded\n- Document timing requirements in comments\n\n**Success Criteria:**\n- All benchmarks run successfully\n- Overhead <50ms consistently\n- Resolution <25ms\n- Process spawn <25ms\n- Performance regression detection\n\n**Instructions:**\n- When starting this task, mark it as \"In Progress\": [x] In Progress\n- When completed, mark it as \"Completed\": [x] Completed\n```\n\n---\n\n### Documentation and Finalization\n\n#### Task 12: Create Package Documentation\n**Status:** [ ] Not Started | [ ] In Progress | [ ] Completed\n\n**Files to Create:**\n- `internal/shim/doc.go`\n\n**Description:** Package-level documentation with overview and usage examples.\n\n**Dependencies:** All implementation tasks completed\n\n**Estimated Effort:** 1 hour\n\n**_Prompt:**\n```\nYou are writing package documentation for mvnenv-win's shim system.\n\n**Role:** Technical writer with Go documentation expertise.\n\n**Task:** Create internal/shim/doc.go:\n\n1. Package overview:\n   - Purpose: Transparent Maven command interception\n   - Key capabilities: version resolution, command forwarding, I/O pass-through\n   - Architecture: Single binary serves multiple commands via filename detection\n\n2. Usage examples:\n   - Generating shims\n   - Executing commands via shim\n   - Configuring debug mode\n   - Managing PATH\n\n3. Code example:\n```go\n// Example: Generate shims for all Maven commands\ngenerator := shim.NewShimGenerator(mvnenvRoot)\npaths, err := generator.GenerateShims()\nif err != nil {\n    log.Fatal(err)\n}\nfmt.Printf(\"Generated %d shims\\n\", len(paths))\n\n// Example: Execute Maven command with version resolution\nresolver := version.NewVersionResolver(mvnenvRoot)\nexecutor := shim.NewShimExecutor(resolver)\nexitCode, err := executor.Execute(\"mvn\", []string{\"clean\", \"install\"})\nif err != nil {\n    log.Fatal(err)\n}\nos.Exit(exitCode)\n\n// Example: Enable debug mode\nos.Setenv(\"MVNENV_DEBUG\", \"1\")\n// Now shims will output detailed diagnostics\n```\n\n4. Performance characteristics:\n   - <50ms overhead from shim to Maven execution\n   - No I/O buffering\n   - Direct process forwarding\n\n5. Debug mode documentation:\n   - Set MVNENV_DEBUG=1\n   - Output goes to stderr\n   - Includes timing information\n\n**Restrictions:**\n- Follow godoc conventions\n- Keep examples concise and runnable\n- Include performance notes\n\n**Success Criteria:**\n- Package documentation renders in godoc\n- Examples are accurate\n- Performance characteristics documented\n\n**Instructions:**\n- When starting this task, mark it as \"In Progress\": [x] In Progress\n- When completed, mark it as \"Completed\": [x] Completed\n```\n\n---\n\n#### Task 13: Create Build Script for Shim Executable\n**Status:** [ ] Not Started | [ ] In Progress | [ ] Completed\n\n**Files to Create:**\n- `scripts/build-shim.bat` or `scripts/build-shim.ps1`\n\n**Description:** Build script that compiles shim.exe and places it in bin/ directory.\n\n**Dependencies:** Task 1\n\n**Estimated Effort:** 1 hour\n\n**_Prompt:**\n```\nYou are creating a build script for mvnenv-win's shim executable.\n\n**Role:** Build engineer with Go compilation expertise.\n\n**Task:** Create scripts/build-shim.bat (and optionally .ps1):\n\n1. Build script functionality:\n   - Set GOOS=windows\n   - Set GOARCH=amd64\n   - Disable CGO: CGO_ENABLED=0\n   - Compile: go build -o bin/shim.exe cmd/shim/main.go\n   - Verify build succeeded\n   - Report binary size\n\n2. Optional optimizations:\n   - Strip debug info: -ldflags=\"-s -w\"\n   - Enable optimizations: -trimpath\n\n3. Build for both architectures (future):\n   - amd64 (primary)\n   - 386 (optional, if needed)\n\n4. Error handling:\n   - Check if Go is installed\n   - Verify build succeeded\n   - Print clear success/failure message\n\n5. Output example:\n```\nBuilding shim executable...\nGOOS=windows GOARCH=amd64 go build -o bin/shim.exe cmd/shim/main.go\nBuild successful: bin/shim.exe (2.5 MB)\n```\n\n**Restrictions:**\n- Windows batch script (.bat) for portability\n- Optional PowerShell version for modern environments\n- No external dependencies beyond Go\n- Clear error messages\n\n**Success Criteria:**\n- Script builds shim.exe successfully\n- Binary placed in correct location (bin/)\n- Build errors clearly reported\n- Works in cmd.exe and PowerShell\n\n**Instructions:**\n- When starting this task, mark it as \"In Progress\": [x] In Progress\n- When completed, mark it as \"Completed\": [x] Completed\n```\n\n---\n\n#### Task 14: Final Review and Error Message Audit\n**Status:** [ ] Not Started | [ ] In Progress | [ ] Completed\n\n**Files to Review:**\n- All implementation files in `internal/shim/` and `cmd/shim/`\n\n**Description:** Comprehensive review ensuring all error messages are clear, actionable, and match requirements.\n\n**Dependencies:** All previous tasks completed\n\n**Estimated Effort:** 2 hours\n\n**_Prompt:**\n```\nYou are conducting a final review of the shim system implementation for mvnenv-win.\n\n**Role:** Senior Go developer and technical reviewer.\n\n**Task:** Review all implementation for completeness and quality:\n\n1. Error Message Audit:\n   - Review all error messages in internal/shim/ and cmd/shim/\n   - Verify: errors include context (command, version, source)\n   - Verify: errors are actionable (suggest next steps)\n   - Examples:\n     * \"Maven version '3.9.4' is set but not installed.\\nInstall it with: mvnenv install 3.9.4\"\n     * \"No Maven version is set.\\nSet a global version with: mvnenv global <version>\"\n     * \"Maven binary not found at C:\\...\\.mvnenv\\versions\\3.9.4\\bin\\mvn.cmd\\nVersion 3.9.4 may be corrupted. Try reinstalling with: mvnenv install 3.9.4\"\n\n2. Requirements Verification:\n   - Check requirements.md against implementation\n   - Verify all acceptance criteria met\n   - Document any deviations\n\n3. Performance Verification:\n   - Run benchmarks: go test -bench=. ./test/benchmarks/\n   - Verify: overhead <50ms\n   - Verify: resolution <25ms\n   - If targets not met: investigate and optimize\n\n4. Code Quality:\n   - Run go vet on shim packages\n   - Run staticcheck\n   - Run golangci-lint\n   - Fix any issues\n\n5. Test Coverage:\n   - Run: go test -cover ./internal/shim/...\n   - Verify: coverage >90%\n   - Add tests for any uncovered critical paths\n\n6. Integration Verification:\n   - Verify core-version-management integration works\n   - Verify automatic regeneration after install/uninstall\n   - Verify manual regeneration via rehash command\n   - Test debug mode (MVNENV_DEBUG=1)\n\n7. Windows Compatibility:\n   - Test in PowerShell\n   - Test in cmd.exe\n   - Test in Git Bash (if available)\n   - Verify PATH management works\n\n8. Documentation Review:\n   - Verify all exported functions have godoc comments\n   - Check package doc.go is complete\n   - Ensure build scripts documented\n\n**Success Criteria:**\n- All requirements acceptance criteria met\n- Error messages clear and actionable\n- Performance targets achieved (<50ms)\n- Code quality checks pass\n- Test coverage >90%\n- Windows compatibility verified\n- Documentation complete\n\n**Instructions:**\n- When starting this task, mark it as \"In Progress\": [x] In Progress\n- When completed, mark it as \"Completed\": [x] Completed\n```\n\n---\n\n## Summary\n\n**Total Tasks:** 14\n**Estimated Total Effort:** 30 hours\n\n**Task Dependencies Flow:**\n```\nFoundation (Tasks 1-4)\n    ↓\nIntegration (Tasks 5-6)\n    ↓\nTesting (Tasks 7-11)\n    ↓\nDocumentation (Tasks 12-14)\n```\n\n**Critical Path:**\nTask 1 → Task 2 → Task 7 → Task 10 → Task 11 → Task 14\n\n**Parallel Work Opportunities:**\n- Tasks 1, 3, 4 (executor, generator, path) can be done in parallel\n- Tasks 5, 6 (installer integration, rehash command) can be done in parallel after Task 3\n- Tasks 7, 8, 9 (unit tests) can be done in parallel after respective implementations\n- Tasks 12, 13 (documentation, build script) can be done in parallel\n\n**Key Deliverables:**\n1. Single shim executable serving all Maven commands\n2. Automatic shim regeneration after install/uninstall\n3. Manual regeneration via `mvnenv rehash` command\n4. <50ms overhead from shim to Maven execution\n5. Debug mode for troubleshooting (MVNENV_DEBUG=1)\n6. Windows PATH management\n7. Comprehensive test coverage (>90%)\n",
  "fileStats": {
    "size": 35071,
    "lines": 1178,
    "lastModified": "2025-10-12T13:35:40.238Z"
  },
  "comments": []
}